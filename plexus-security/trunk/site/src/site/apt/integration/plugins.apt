 -----
 Plexus Security Webwork Integration
 -----
 26 October 2006
 -----

Plugin Configuration

 Then you will also want to setup the following plugins in the <build> section of the webapp's pom as well.
 Briefly, the maven-clean-plugin needs to be configured a little bit to point to the different locations of
 files to be cleaned.  The maven-war-plugin is being used to pull in the plexus-security war overlay and
 unpackage it into place so the relavent jsp's and actions are available.  Lastly is the jetty-maven-plugin
 which has some configuration to get datasources setup (the jetty-env.xml) and the port it will run on, etc.

+--------------------------------------+
       <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.1.1</version>
        <!-- This configuration is added to cleanup from war:inplace -->
        <configuration>
          <filesets>
            <fileset>
              <directory>${basedir}/</directory>
              <includes>
                <include>derby.log</include>
              </includes>
            </fileset>
            <fileset>
              <directory>${basedir}/src/main/webapp</directory>
              <includes>
                <!-- TODO: META-INF shouldn't be required, seems to be an issue with the current war plugin -->
                <include>META-INF</include>
                <include>WEB-INF/classes</include>      <!-- Classes and Resources from other wars -->
                <include>WEB-INF/lib</include>          <!-- Dependencies from other wars -->
                <include>WEB-INF/database</include>     <!-- Database location configured in application.xml -->
                <include>WEB-INF/logs</include>         <!-- Log file location specified in application.xml -->
                <include>pss</include>                  <!-- plexus-security css and javascript -->
                <include>WEB-INF/jsp/pss</include>      <!-- plexus-security jsps -->
                <include>WEB-INF/template/pss</include> <!-- plexus-security xwork templates -->
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.0.1</version>
        <configuration>
          <!-- Some versions of maven-war-plugin (snapshots) have this incorrectly defaulted to true.
               Specifically setting this to false to avoid accidental jar file creation. -->
          <archiveClasses>false</archiveClasses>
          <dependentWarExcludes>META-INF/**,WEB-INF/web.xml,WEB-INF/classes/xwork.xml</dependentWarExcludes>
        </configuration>
        <!-- TODO: would be good to make the jetty plugin aware of these and remove the below -->
                <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <!-- Needed to get the plexus-security war overlay to do its thing before jetty:run -->
              <goal>inplace</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>maven-jetty-plugin</artifactId>
        <version>6.0.1</version>
        <configuration>
          <scanIntervalSeconds>10</scanIntervalSeconds>
          <contextPath>/</contextPath>
          <jettyEnvXml>${basedir}/src/jetty-env.xml</jettyEnvXml>
          <connectors>
            <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
              <port>9090</port>
              <maxIdleTime>60000</maxIdleTime>
            </connector>
          </connectors>
        </configuration>
      </plugin>
+--------------------------------------+

 If you are planning on writing your own webwork actions, then your'll need to generally make this available
 so that your actions are rendered into components correctly if you are not generating your components.xml by hand.
 This will setup your actions as per-look instantiations, so that every page served results in a new action
 being generated.  This is currently the standard way to using xwork with plexus.

+--------------------------------------+

      <plugin>
        <groupId>org.codehaus.plexus</groupId>
        <artifactId>plexus-maven-plugin</artifactId>
        <configuration>
          <roleDefaults>
            <roleDefault>
              <role>com.opensymphony.xwork.Action</role>
              <instantiation-strategy>per-lookup</instantiation-strategy>
            </roleDefault>
          </roleDefaults>
        </configuration>
        <executions>
          <execution>
            <id>generate</id>
            <goals>
              <goal>descriptor</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

+--------------------------------------+
