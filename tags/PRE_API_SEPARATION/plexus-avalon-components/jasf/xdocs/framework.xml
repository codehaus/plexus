<?xml version="1.0"?>

<document>

  <properties>
    <title>Overview</title>
    <author email="dan@envoisolutions.com">Dan Diephouse</author>
  </properties>

  <body>

  <section name="Overview">
    <p>
      There are four different parts to any good security framework:
      <ul>
        <li><a href="#Authentication">Authentication</a></li>
        <li><a href="#Session Management">Session Management</a></li>
        <li><a href="#Authorization: entities and resources">Authorization</a></li>
        <li><a href="#Security Management">Security Management</a></li>
      </ul>
      This framework seeks to seperate these parts, making them
      sufficiently flexible so that you may reuse your security code
      in a variety of applications and environments.
    </p>
  </section>
  <section name="Authentication">
    <p>
      Authentication determines if an entity, someone or something that wants to
      interact with the system, is allowed to.  Entities are things
      or people interacting with the system.  They can range from regular users
      to company accounts to automated computer systems.   Authenticating these
      entities consists of passing the unique entity id and a token, or password.
      The corresponding class in the security framework is EntityAuthenticationController.
      It is easy to extend and create your own.
    </p>
    <p>
    </p>
  </section>
  <section name="Session Management">
    <p>
      Session management should be handled the application using the framework.
      JASF is not responsible for handling validation/invalidation of the
      session.
    </p>
  </section>
  <section name="Authorization: entities and resources"> 
      <p>
	    When we write security code what we are actually trying to do
	    is restrict access to certain resources.  These resources require
	    that an entity has specific permissions to access or use them.  For
	    example, an administration web page may require that the user is 
	    an administrator.
	  </p>
      <p>
        However the relation between entities and resources is different for every
        application (that is why there is this framework).  For example, a users
        credentials might change depending on the resource being accessed.  Then, if 
        there is then to be a generic framework this must be totally left up to the
        developer.
      </p>
      <p>
      	This is where the ResourceAccessController comes in.  It has one simple method:
      	<source>
public interface ResourceAccessController
{
    public boolean isAuthorized( Object entity, Object resource );
}
</source>
      </p>
	  <p>
		As can be seen, the relation between the entity and the resource is left totally
		up to the implementation.  But, this doesn't mean you have to implement these all
		yourself.  The framework comes prepackaged with some implementations already.
      </p>
	  <p>
        Part of the motivation for this framework is to stop people from 
        over-complicating permissions.  For example, lets say you 
        have a website that keeps track of projects.  For each project 
        a user can have different permissions.  Lets keep it simple for 
        now - each user can have read and/or write permissions for a project.
        Most people would instinctively say that the project is part of 
        the required permissions for the system.  But, the project is the 
        resource that we are trying to access.  The permission is only 
        the "read" or "write" part.
      </p>

  </section>
  <section name="Security Management">
    <p>
      Security management is that area that covers managing users, groups of users,
      roles, and permissions.  This is NOT handled by this framework.  The
      reason for this is is that it is implementation/application specific.  Take 
      groups of users for example - they have nothing to do with Authentication or
      Authorization.  Another example is when you are using a predetermined service
      that you have no control over.  This could be something like a Windows NT server
      or Microsoft's passport service. This is why these functions have been left 
      out of the framework.
    </p>
  </section>

</body>
</document>