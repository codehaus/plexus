<?xml version="1.0"?>

<document>

  <properties>
    <title>Class Methods</title>
    <author email="dan@envoisolutions.com">Dan Diephouse</author>
  </properties>

  <body>
	<section name="Class Methods">
	  <p>
	    In many applications it is beneficial to restrict access to certain methods
	    depending on the user's credentials.  This framework provides a way to do this
	    using 
	    <a href="http://jakarta.apache.org/commons/sandbox/attributes/">Commons Attributes</a>.
	    With commons attributes you can define attributes for each
	    method in your javadocs.  With these we can set the necessary credentials to 
	    execute a certain method.  You just need to add the "@credential" tag like so:
	    <source>
/**
 * Pretends to do something that needs security.
 * 
 * @credential employee_read
 */
public void myRestrictedMethod()
{
}      
</source>
	  </p>
	  <p>
	    The ClassAccessControllers are then able to read this attribute and determine if
	    an entity has the required credentials to execute it.
	  </p>
	  <p>
	  	The basic and torque packages provide some ResourceAccessControllers for the methods.
	  	To use them you pass your entity and the name of the method.  Here is an example
	  	from the ClassSecurityTest:
	    <source>
Method restrictedMethod = 
    ClassSecurityTest.class.getDeclaredMethod("myBadRestrictedMethod", new Class[0]);
ResourceAccessController controller =
            resourceManager.lookup(ClassMethodResource.RESOURCE_TYPE);

boolean authorizerd = controller.isAuthorized(entity, restrictedMethod) );
</source>
	  </p>
	  <p>
	  	You need to lookup the method manually.  It would be nice to develop an aspect
	  	oriented system with attributes, but it is impossible to do so because you don't
	  	know what entity is accessing the method.
	  </p>
	  <subsection name="Uses">
	  	<p>
	  	  You may ask, "well if I need to look up my method every time, this doesn't seem
	  	  worth it."  You may very well be right.  But it wouldn't have been designed without
	  	  a use :).
	  	</p>
	  	<p>
	  	  In <a href="http://jakarta.apache.org/turbine">Turbine</a> ActionEvents can be
	  	  called from one's templates.  These action events are run through introspection
	  	  and it is therefore very easy to tie in this kind of access control.
	  	</p>
	  </subsection>
	</section>
</body>
</document>