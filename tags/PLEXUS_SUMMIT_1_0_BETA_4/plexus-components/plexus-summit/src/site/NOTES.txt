5 July 2004

o probably don't ever need to use a screen module now that we have the
  pull tools and the context view populator. or modules period.

o try to simplify the whole pipeline

o display and resolver possibly combined?

10 March 2003

-> We should give some thought about how to let users provide
   implementations for HttpServlet.getLastModified().  This enables the
   server to set the appropriate Last-Modified HTTP header, as well as
   verifying an If-Modified-Since HTTP header sent by a client.  If the
   content hasn't changed, the server sends back a 304 (Not Modified)
   and doesn't even call doGet/doPost/etc ... Existing turbiners never
   had this functionality, but it is definitely a good idea to think
   about as I need/want it for my apps that display statistical
   information that is collected on regular intervals.  :-)

12 may 2002

-> Render needs to be freed from a TemplateContext, need a cleaner concept
   of rendering.

-> RunData needs to be renamed something else and made cleaner.

-> Need to entirely change the turbine3 core so that I can lay an
   adapter layer right over top of turbine3.

ok, i can compile now but i don't think things are functional right now. i
don't think it would take much to get the jsp test working but the velocity
mechanism is punched right now.

i have to cleanup and document the existing classes and work from there.
things were still very coupled with the fulcrum template service
which was a severe PITA.

! -> need to rename rundata
! -> need to turn the new rundata thingy into a component

-> localization component using XML
-> mimetype mapping using illka's code and the jetspeed code.

-> how to deal with logging efficiently when the target is changed
   because of security concerns. how to remove that requirement.

-> need to decouple modules and renderers. all a renderer should be is a
   searching strategy. but what happens when developers want different
   resolving strategies for targets and modules?

WHAT IS A RESOLVER?

For a given scenerio, say the classic model, the resolver should perform
full resolution for the target. So for the classic model given the target
the resolver has to figure out what the sibling templates should be i.e.
what the layout should be and what the navigations should be. The renderer
itself should not perform any resolution it should be given a valid
handle to a resource and it should be rendered.

For each given view path a resolver will match up that view path with
any Modules and sibling templates depending on the strategy employed
by the resolver. In the case of the ClassicResolver we match up a
layout view (sibling), a layout module and a screen module. The navigations
in this scenerio are stated explicitly in the layout view.

WHAT IS A RENDERER?

I wonder if in most cases we could use the native methods of the view
system to do the rendering. With velocity we could definitely use #parse
within the templates (maybe not, depending on module execution) and JSP
includes. But what about JGenerator.

The renderer looks like it is also going to have to take care of
executing the module associated with the view before the rendering
takes place because according to the classic view the renderers look like
they have to be placed in the view in order for the standard classic
pattern to work. this is probably indicative of problems with the classic
model of rendering content in a servlet environment.

WHAT IS AN ACTIVITY?

Is an action to be performed on a target entity.

WHAT IS AN ACTIVITY DISPATCHING MODEL?

I need collaboration diagrams for the application, resolver, and renderer
and module loader.

How are errors going to be handled consistently and cleanly.

Use correct iterator pattern -> for (Iterator i = ...)

Remember binary output like the production of PDF files.

Single signon

Aggregation in the same vein as site mesh. take a look at site mesh and see
if that behaviour can be integrated into turbine.

How to deal with exceptions in a decent way when components are coming
from different sources. Need a component exception.

Components that need application paths in the file system to work. like the
velocity view component that needs real paths to process templates or
JAR files.

Things will become a matter of component integration. So a component container
is definitely the way to go.

---

I would like to be able to take the turbine 2 classes and be able to access
them via a pipeline.

So I need to restructure the foundation of turbine so that i can make
turbine 2 applications work and allow some new work to be done.

All I want left is the basic pipeline, get rid of all the remaining
couplings so that we can start anew.

get rid of parameter parser and use the commons map utils and make an
adapter that doesn't waste time parsing the request object.

how to create a running test for turbine so that i can have it running so
that i can quickly change things and make changes.
