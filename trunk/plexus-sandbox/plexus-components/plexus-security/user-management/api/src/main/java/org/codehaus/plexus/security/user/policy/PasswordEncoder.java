package org.codehaus.plexus.security.user.policy;

/*
 * Copyright 2001-2006 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * <p>
 * Interface for performing authentication operations on a password.
 * </p>
 * 
 * <p>Javadoc about encoding and salts copied from Acegi Security.</p>
 *
 * @author colin sampaleanu
 * @author <a href="mailto:joakim@erdfelt.com">Joakim Erdfelt</a>
 * @version $Id$
 */
public interface PasswordEncoder
{
    /**
     * Provide the Plexus Component Role.
     */
    public static final String ROLE = PasswordEncoder.class.getName();
    
    /**
     * <p>
     * Sets the system wide salt to use in the encoder.
     * </p>
     * 
     * <p>
     * The specified salt will potentially be used by the implementation to "salt" the initial value before
     * encoding. A salt is usually a user-specific value which is added to the password before the digest is computed.
     * This means that computation of digests for common dictionary words will be different than those in the backend
     * store, because the dictionary word digests will not reflect the addition of the salt. If a per-user salt is
     * used (rather than a system-wide salt), it also means users with the same password will have different digest
     * encoded passwords in the backend store.
     * </p>
     * 
     * @param salt the salt to use as a default for the encoder.
     */
    public void setSystemSalt( Object salt );

    /**
     * <p>
     * Encodes the specified raw password with an implementation specific algorithm, using the system wide salt.
     * </p>
     * 
     * <p>
     * This will generally be a one-way message digest such as MD5 or SHA, but may also be a plaintext
     * variant which does no encoding at all, but rather returns the same password it was fed. The latter is useful to
     * plug in when the original password must be stored as-is.
     * </p>
     * 
     * @param rawPass the password to encode
     *
     * @return encoded password
     */
    public String encodePassword( String rawPass );
    
    /**
     * <p>
     * Encodes the specified raw password with an implementation specific algorithm, using user specific salt.
     * </p>
     * 
     * <p>
     * This will generally be a one-way message digest such as MD5 or SHA, but may also be a plaintext
     * variant which does no encoding at all, but rather returns the same password it was fed. The latter is useful to
     * plug in when the original password must be stored as-is.
     * </p>
     * 
     * <p>
     * The specified salt will potentially be used by the implementation to "salt" the initial value before
     * encoding. A salt is usually a user-specific value which is added to the password before the digest is computed.
     * This means that computation of digests for common dictionary words will be different than those in the backend
     * store, because the dictionary word digests will not reflect the addition of the salt. If a per-user salt is
     * used (rather than a system-wide salt), it also means users with the same password will have different digest
     * encoded passwords in the backend store.
     * </p>
     * 
     * @param rawPass the password to encode
     * @param salt optionally used by the implementation to "salt" the raw password before encoding. 
     *             A <code>null</code> value is legal.
     * @return encoded password
     */
    public String encodePassword( String rawPass, Object salt );
    

    /**
     * <p>
     * Validates a specified "raw" password against an encoded password, using the system wide salt.
     * </p>
     * 
     * <p>
     * The encoded password should have previously been generated by {@link #encodePassword(String)}. 
     * This method will encode the <code>rawPass</code> (using the system wide <code>salt</code>),  and then
     * compared it with the presented <code>encPass</code>.
     * </p>
     * 
     * <p>
     * For an explanation of salts, please refer to {@link #setSystemSalt(Object)}.
     * </p>
     *
     * @param encPass a pre-encoded password
     * @param rawPass a raw password to encode and compare against the pre-encoded password
     *
     * @return true if the password is valid , false otherwise
     */
    public boolean isPasswordValid( String encPass, String rawPass );
    
    /**
     * <p>
     * Validates a specified "raw" password against an encoded password, using a user specific salt.
     * </p>
     * 
     * <p>
     * The encoded password should have previously been generated by {@link #encodePassword(String,
     * Object)}. This method will encode the <code>rawPass</code> (using the optional <code>salt</code>),  and then
     * compared it with the presented <code>encPass</code>.
     * </p>
     * 
     * <p>
     * For a discussion of salts, please refer to {@link #encodePassword(String, Object)}.
     * </p>
     *
     * @param encPass a pre-encoded password
     * @param rawPass a raw password to encode and compare against the pre-encoded password
     * @param salt optionally used by the implementation to "salt" the raw password before encoding. A
     *        <code>null</code> value is legal.
     *
     * @return true if the password is valid , false otherwise
     */
    public boolean isPasswordValid( String encPass, String rawPass, Object salt );
}
