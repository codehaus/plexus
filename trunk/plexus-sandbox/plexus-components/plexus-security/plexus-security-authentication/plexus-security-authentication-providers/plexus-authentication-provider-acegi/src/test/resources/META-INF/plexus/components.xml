<plexus>
  <components>
    <component>
      <role>org.codehaus.plexus.security.PlexusSecurityRealm</role>
      <role-hint>default</role-hint>
      <implementation>org.codehaus.plexus.security.DefaultPlexusSecurityRealm</implementation>
      <description>DefaultPlexusSecurityRealm:</description>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.security.Authenticator</role>
          <field-name>authenticator</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.Authorizer</role>
          <field-name>authorizer</field-name>
        </requirement>
      </requirements>
    </component>
    <component>
      <role>org.codehaus.plexus.security.Authenticator</role>
      <role-hint>acegi</role-hint>
      <implementation>org.codehaus.plexus.security.DefaultAuthenticator</implementation>
      <description>DefaultAuthenticator:</description>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.security.AuthenticationStore</role>
          <role-hint>acegi</role-hint>
          <field-name>authStore</field-name>
        </requirement>
      </requirements>
    </component>
    <component>
      <role>org.codehaus.plexus.security.Authorizer</role>
      <implementation>org.codehaus.plexus.security.DefaultAuthorizer</implementation>
      <role-hint>default</role-hint>
      <description>DefaultAuthorizer:</description>
    </component>
    <component>
      <role>org.codehaus.plexus.security.AuthenticationStore</role>
      <role-hint>acegi</role-hint>
      <implementation>org.codehaus.plexus.security.acegi.AcegiAuthenticationStore</implementation>
      <description>AcegiAuthenticationStore:</description>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.ProviderManager</role>
          <field-name>manager</field-name>
          <role-hint>dao</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.acegi.AuthenticationTokenFactory</role>
          <field-name>tokenFactory</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.providers.ProviderManager</role>
      <implementation>org.acegisecurity.providers.ProviderManager</implementation>
      <role-hint>dao</role-hint>
      <requirements>
        <requirement>
          <role>org.acegisecurity.providers.dao.DaoAuthenticationProvider</role>
          <field-name>providers</field-name>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.acegisecurity.userdetails.UserDetailsService</role>
      <implementation>org.acegisecurity.userdetails.memory.InMemoryDaoImpl</implementation>
      <configuration>
        <userProperties>
          <property>
            <name>foo</name>
            <value>bar,ROLE_USER,ROLE_SUPERVISOR</value>
          </property>
        </userProperties>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.providers.dao.DaoAuthenticationProvider</role>
      <implementation>org.acegisecurity.providers.dao.DaoAuthenticationProvider</implementation>
      <requirements>
        <requirement>
          <role>org.acegisecurity.userdetails.UserDetailsService</role>
          <field-name>userDetailsService</field-name>
        </requirement>
      </requirements>
      <configuration>
        <passwordEncoder implementation="org.acegisecurity.providers.encoding.PlaintextPasswordEncoder"/>
      </configuration>
    </component>

    <component>
      <role>org.acegisecurity.event.authentication.LoggerListener</role>
      <implementation>org.acegisecurity.event.authentication.LoggerListener</implementation>
    </component>
  </components>
</plexus>