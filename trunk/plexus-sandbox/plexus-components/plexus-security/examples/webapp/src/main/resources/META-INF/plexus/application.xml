<plexus>
  <components>

    <component>
      <role>org.codehaus.plexus.security.system.SecuritySystem</role>
      <implementation>org.codehaus.plexus.security.system.DefaultSecuritySystem</implementation>
      <role-hint>default</role-hint>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.security.authentication.AuthenticationManager</role>
          <role-hint>default</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.authorization.Authorizer</role>
          <role-hint>rbac</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.user.UserManager</role>
          <role-hint>jdo</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.keys.KeyManager</role>
          <role-hint>jdo</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.policy.UserSecurityPolicy</role>
          <role-hint>default</role-hint>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.codehaus.plexus.security.authorization.Authorizer</role>
      <role-hint>rbac</role-hint>
      <implementation>org.codehaus.plexus.security.authorization.rbac.RbacAuthorizer</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.security.rbac.RBACManager</role>
          <role-hint>jdo</role-hint>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.authorization.rbac.evaluator.PermissionEvaluator</role>
          <role-hint>default</role-hint>
        </requirement>
      </requirements>
    </component>

    <component>
      <role>org.codehaus.plexus.security.policy.PasswordRule</role>
      <role-hint>character-length</role-hint>
      <implementation>org.codehaus.plexus.security.policy.rules.CharacterLengthPasswordRule</implementation>
      <description>Basic Password Rule, Checks for non-empty passwords that have between {@link #setMinimumCharacters(int)} and {@link #setMaximumCharacters(int)} characters in length.</description>
      <configuration>
        <enabled>true</enabled>
        <minimum-characters>1</minimum-characters>
        <maximum-characters>8</maximum-characters>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.PasswordRule</role>
      <role-hint>reuse</role-hint>
      <implementation>org.codehaus.plexus.security.policy.rules.ReusePasswordRule</implementation>
      <description>Password Rule, Checks supplied password found at {@link User#getPassword()} against the {@link User#getPreviousEncodedPasswords()} to ensure that a password is not reused.</description>
      <configuration>
        <enabled>true</enabled>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.PasswordRule</role>
      <role-hint>numerical-count</role-hint>
      <implementation>org.codehaus.plexus.security.policy.rules.NumericalPasswordRule</implementation>
      <description>Basic Password Rule, Checks for non-empty passwords that have at least {@link #setMinimumCount(int)} of numerical characters contained within.</description>
      <configuration>
        <enabled>true</enabled>
        <minimum-count>1</minimum-count>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.PasswordRule</role>
      <role-hint>must-have</role-hint>
      <implementation>org.codehaus.plexus.security.policy.rules.MustHavePasswordRule</implementation>
      <description>Basic Password Rule, Checks for non-empty Passwords in non guest users.</description>
      <configuration>
        <enabled>true</enabled>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.PasswordRule</role>
      <role-hint>alpha-count</role-hint>
      <implementation>org.codehaus.plexus.security.policy.rules.AlphaPasswordRule</implementation>
      <description>Basic Password Rule, Checks for non-empty passwords that have at least {@link #setMinimumCount(int)} of alpha characters contained within.</description>
      <configuration>
        <enabled>true</enabled>
        <minimum-count>1</minimum-count>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.UserSecurityPolicy</role>
      <role-hint>default</role-hint>
      <implementation>org.codehaus.plexus.security.policy.DefaultUserSecurityPolicy</implementation>
      <description>User Security Policy.</description>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.security.policy.PasswordEncoder</role>
          <role-hint>sha256</role-hint>
          <field-name>passwordEncoder</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.policy.UserValidationSettings</role>
          <field-name>userValidationSettings</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.security.policy.PasswordRule</role>
          <field-name>rules</field-name>
        </requirement>
      </requirements>
      <configuration>
        <previous-passwords-count>6</previous-passwords-count>
        <login-attempt-count>3</login-attempt-count>
        <password-expiration-days>90</password-expiration-days>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.security.policy.UserValidationSettings</role>
      <implementation>org.codehaus.plexus.security.policy.DefaultUserValidationSettings</implementation>
      <description>DefaultUserValidationSettings</description>
      <configuration>
        <email-validation-required>true</email-validation-required>
        <!-- This is a timeout for the validation url (in minutes) - 2880 = 48 hours -->
        <email-validation-timeout>2880</email-validation-timeout>
        <!-- This should only be a prefix url with no trailing slash -->
        <email-validation-url>http://localhost:9090</email-validation-url>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.security.ui.web.mail.Mailer</role>
      <implementation>org.codehaus.plexus.security.ui.web.mail.Mailer</implementation>
      <description>Mailer</description>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.velocity.VelocityComponent</role>
          <field-name>velocity</field-name>
        </requirement>
        <requirement>
          <role>org.codehaus.plexus.mailsender.MailSender</role>
          <field-name>mailSender</field-name>
        </requirement>
      </requirements>
      <configuration>
        <from-name>security@unconfigured.com</from-name>
        <timestamp-format>EEE, d MMM yyyy HH:mm:ss Z</timestamp-format>
        <validation-subject-line>Welcome to The Plexus Security Example Webapp</validation-subject-line>
        <application-name>Plexus Security Example Webapp</application-name>
        <validation-url>/security/validate.action?key=</validation-url>
        <feedback-url>/feedback.html</feedback-url>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.mailsender.MailSender</role>
      <implementation>org.codehaus.plexus.mailsender.javamail.JavamailMailSender</implementation>
      <configuration>
        <smtp-host>localhost</smtp-host>
        <smtp-port>25</smtp-port>
        <sslProvider>com.sun.net.ssl.internal.ssl.Provider</sslProvider>
        <!--
        <username>mylogin</username>
        <password>mypassword</password>
        <sslMode>true</sslMode>
        -->
      </configuration>
    </component>


    <component>
      <role>org.codehaus.plexus.jdo.JdoFactory</role>
      <implementation>org.codehaus.plexus.jdo.DefaultConfigurableJdoFactory</implementation>
      <configuration>

        <!-- HSQLDB Configuration -->
        <!--
          NOTE: NO NOT USE THIS CONFIGURATION FOR A PRODUCTION SYSTEM.
          HSQLDB keeps all data in memory at all times.

          NOTE: JPOX 1.1.1 won't create the tables on start
          http://www.jpox.org/servlet/jira/browse/CORE-2946
        -->
        <!--
        <driverName>org.hsqldb.jdbcDriver</driverName>
        <url>jdbc:hsqldb:mem:test</url>
        <userName>sa</userName>
        <password></password>
            -->

        <!-- Apache Derby Configuration -->
        <driverName>org.apache.derby.jdbc.EmbeddedDriver</driverName>
        <url>jdbc:derby:${plexus.home}/database;create=true</url>
        <userName>sa</userName>
        <password></password>

        <!-- Postgresql Configuration -->
        <!--
        <driverName>org.postgresql.Driver</driverName>
        <url>jdbc:postgresql://localhost/continuum</url>
        <userName>username</userName>
        <password></password>
        -->

        <!-- JPOX and JDO configuration -->
        <persistenceManagerFactoryClass>org.jpox.PersistenceManagerFactoryImpl</persistenceManagerFactoryClass>
        <otherProperties>
          <property>
            <name>org.jpox.autoCreateSchema</name>
            <value>true</value>
          </property>
          <property>
            <name>org.jpox.autoStartMechanism</name>
            <value>SchemaTable</value>
          </property>
          <property>
            <name>org.jpox.autoStartMechanismMode</name>
            <value>Ignored</value>
          </property>
          <property>
            <name>org.jpox.validateTables</name>
            <value>false</value>
          </property>
          <property>
            <name>org.jpox.validateConstraints</name>
            <value>false</value>
          </property>
          <property>
            <name>org.jpox.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
          <property>
            <name>org.jpox.poid.transactionIsolation</name>
            <value>READ_UNCOMMITTED</value>
          </property>
          <property>
            <name>org.jpox.rdbms.dateTimezone</name>
            <value>JDK_DEFAULT_TIMEZONE</value>
          </property>
        </otherProperties>
      </configuration>
    </component>


    <!--
     | Logger manager
     -->
    <component>
      <role>org.codehaus.plexus.logging.LoggerManager</role>
      <implementation>org.codehaus.plexus.logging.log4j.Log4JLoggerManager</implementation>
      <lifecycle-handler>basic</lifecycle-handler>

      <configuration>
        <threshold>DEBUG</threshold>
        <default-appender>console</default-appender>
        <appenders>
          <appender>
            <id>console</id>
            <threshold>INFO</threshold>
            <type>org.apache.log4j.ConsoleAppender</type>
            <conversion-pattern>%d [%t] %-5p %-30c{1} - %m%n</conversion-pattern>
          </appender>
        </appenders>
        <levels>
          <level>
            <hierarchy>org.codehaus.plexus.security</hierarchy>
            <level>DEBUG</level>
          </level>
          <level>
            <hierarchy>org.codehaus.plexus.velocity</hierarchy>
            <level>WARN</level>
          </level>
          <level>
            <hierarchy>com.opensymphony.xwork</hierarchy>
            <level>INFO</level>
          </level>
          <level>
            <hierarchy>com.opensymphony.webwork</hierarchy>
            <level>INFO</level>
          </level>
        </levels>
      </configuration>
    </component>
  </components>
  
  <!-- Override default configuration of components -->
  <lifecycle-handler-manager implementation="org.codehaus.plexus.lifecycle.DefaultLifecycleHandlerManager">
    <default-lifecycle-handler-id>webapp</default-lifecycle-handler-id>
    <lifecycle-handlers>
      <lifecycle-handler implementation="org.codehaus.plexus.personality.plexus.PlexusLifecycleHandler">
        <id>webapp</id>
        <name>Web Application Component Lifecycle Handler</name>
        <begin-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogEnablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.CompositionPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ContextualizePhase"/>
          <phase implementation="org.codehaus.plexus.xwork.ConfigurationPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ServiceablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StartPhase"/>
        </begin-segment>
        <suspend-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.SuspendPhase"/>
        </suspend-segment>
        <resume-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ResumePhase"/>
        </resume-segment>
        <end-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StopPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.DisposePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogDisablePhase"/>
        </end-segment>
      </lifecycle-handler>
    </lifecycle-handlers>
  </lifecycle-handler-manager>
</plexus>
