<plexus>

  <!--
   | o Should probably move the composition resolver out of the component repository, we'll
   |   just let the repository deal with storing and validating the component descriptors.
   |   The composition resolution should probably be made part of the composer proper. You
   |   can see there is some funny business as the resolver is part of the component repository
   |   currently and the composer is a normal component down there at the bottom. That doesn't
   |   look right.
   -->

  <!-- Bootstrap components -->
  <!-- default-component-factory-id>java</default-component-factory-id -->

  <component-repository implementation="org.codehaus.plexus.component.repository.DefaultComponentRepository">
    <composition-resolver implementation="org.codehaus.plexus.component.composition.DefaultCompositionResolver"/>
  </component-repository>

  <component-discoverer-manager implementation="org.codehaus.plexus.component.discovery.DefaultComponentDiscovererManager">
    <component-discoverers>
      <component-discoverer implementation="org.codehaus.plexus.component.discovery.DefaultComponentDiscoverer"/>
      <component-discoverer implementation="org.codehaus.plexus.component.discovery.PlexusXmlComponentDiscoverer"/>
    </component-discoverers>
  </component-discoverer-manager>

  <component-manager-manager implementation="org.codehaus.plexus.component.manager.DefaultComponentManagerManager">
    <default-component-manager-id>singleton</default-component-manager-id>
    <component-managers>
      <component-manager implementation="org.codehaus.plexus.component.manager.PerLookupComponentManager">
        <id>per-lookup</id>
      </component-manager>
      <component-manager implementation="org.codehaus.plexus.component.manager.ClassicSingletonComponentManager">
        <id>singleton</id>
      </component-manager>
      <component-manager implementation="org.codehaus.plexus.component.manager.KeepAliveSingletonComponentManager">
        <id>singleton-keep-alive</id>
      </component-manager>
    </component-managers>
  </component-manager-manager>

  <lifecycle-handler-manager implementation="org.codehaus.plexus.lifecycle.DefaultLifecycleHandlerManager">
    <default-lifecycle-handler-id>plexus</default-lifecycle-handler-id>
    <lifecycle-handlers>
      <lifecycle-handler implementation="org.codehaus.plexus.personality.plexus.PlexusLifecycleHandler">
        <id>plexus</id>
        <name>Plexus Lifecycle Handler</name>
        <begin-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogEnablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.CompositionPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ContextualizePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.AutoConfigurePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ServiceablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StartPhase"/>
        </begin-segment>
        <suspend-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.SuspendPhase"/>
        </suspend-segment>
        <resume-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ResumePhase"/>
        </resume-segment>
        <end-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StopPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.DisposePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogDisablePhase"/>
        </end-segment>
      </lifecycle-handler>
      <lifecycle-handler implementation="org.codehaus.plexus.lifecycle.BasicLifecycleHandler">
        <id>basic</id>
        <begin-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogEnablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.AutoConfigurePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StartPhase"/>
        </begin-segment>
        <end-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StopPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.DisposePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogDisablePhase"/>
        </end-segment>
      </lifecycle-handler>
      <lifecycle-handler implementation="org.codehaus.plexus.lifecycle.BasicLifecycleHandler">
        <id>plexus-configurable</id>
        <begin-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogEnablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.CompositionPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ContextualizePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ConfigurablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ServiceablePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.InitializePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StartPhase"/>
        </begin-segment>
        <suspend-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.SuspendPhase"/>
        </suspend-segment>
        <resume-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.ResumePhase"/>
        </resume-segment>
        <end-segment>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.StopPhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.DisposePhase"/>
          <phase implementation="org.codehaus.plexus.personality.plexus.lifecycle.phase.LogDisablePhase"/>
        </end-segment>
      </lifecycle-handler>
      <lifecycle-handler implementation="org.codehaus.plexus.lifecycle.PassiveLifecycleHandler">
        <id>passive</id>
      </lifecycle-handler>
    </lifecycle-handlers>
  </lifecycle-handler-manager>

  <component-factory-manager implementation="org.codehaus.plexus.component.factory.DefaultComponentFactoryManager">
    <default-component-factory-id>java</default-component-factory-id>
    <default-component-factory implementation="org.codehaus.plexus.component.factory.java.JavaComponentFactory"/>
    <!-- component-factories>
      <component-factory implementation="org.codehaus.plexus.component.factory.java.JavaComponentFactory">
        <id>java</id>
      </component-factory>
    </component-factories -->
  </component-factory-manager>

  <component-composer-manager implementation="org.codehaus.plexus.component.composition.DefaultComponentComposerManager">
    <component-composers>
      <component-composer implementation="org.codehaus.plexus.component.composition.FieldComponentComposer">
        <id>field</id>
      </component-composer>
      <component-composer implementation="org.codehaus.plexus.component.composition.SetterComponentComposer">
        <id>setter</id>
      </component-composer>
      <component-composer implementation="org.codehaus.plexus.component.composition.MapOrientedComponentComposer">
        <id>map-oriented</id>
      </component-composer>
      <component-composer implementation="org.codehaus.plexus.component.composition.NoOpComponentComposer">
        <id>noop</id>
      </component-composer>
    </component-composers>
  </component-composer-manager>

  <!-- Internal components -->
  <components>
    <component>
      <role>org.codehaus.plexus.logging.LoggerManager</role>
      <implementation>org.codehaus.plexus.logging.console.ConsoleLoggerManager</implementation>
      <lifecycle-handler>basic</lifecycle-handler>
      <configuration>
        <threshold>info</threshold>
      </configuration>
    </component>
    <!-- Component configurator -->
    <component>
      <role>org.codehaus.plexus.component.configurator.ComponentConfigurator</role>
      <role-hint>basic</role-hint>
      <implementation>org.codehaus.plexus.component.configurator.BasicComponentConfigurator</implementation>
      <lifecycle-handler>passive</lifecycle-handler>
      <!-- TODO: the converters should be components -->
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.component.configurator.converters.lookup.ConverterLookup</role>
          <role-hint>default</role-hint>
        </requirement>
      </requirements>
    </component>
    <component>
      <role>org.codehaus.plexus.component.configurator.ComponentConfigurator</role>
      <role-hint>map-oriented</role-hint>
      <implementation>org.codehaus.plexus.component.configurator.MapOrientedComponentConfigurator</implementation>
      <lifecycle-handler>passive</lifecycle-handler>
      <!-- TODO: the converters should be components -->
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.component.configurator.converters.lookup.ConverterLookup</role>
          <role-hint>default</role-hint>
        </requirement>
      </requirements>
    </component>
    <component>
      <role>org.codehaus.plexus.component.configurator.converters.lookup.ConverterLookup</role>
      <role-hint>default</role-hint>
      <implementation>org.codehaus.plexus.component.configurator.converters.lookup.DefaultConverterLookup</implementation>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.component.configurator.converters.ConfigurationConverter</role>
          <field-name>converters</field-name>
        </requirement>
      </requirements>
    </component>
  </components>

</plexus>
