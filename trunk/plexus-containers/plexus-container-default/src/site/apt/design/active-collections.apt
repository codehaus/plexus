  ---
  Plexus-Backed Active Collections Design
  ---
  John Casey
  ---
  12-April-2005
  ---
  
Design Documentation: Plexus-Backed "Active" Collections of Components

* Introduction

  Many plexus components use references to other components which are not as
  simple as a one-to-one mapping. In order to support such cases, plexus has
  a notion of Collection-oriented component injection, in which requirements
  of components can reference fields that are Collections (List, Set, Map).
  When the container attempts to wire satisfy these requirements, it sees that
  they are collection mappings, and gives the component the appropriate
  collection-view on the container's component repository. Behavior is 
  summarized in the following way, accoring to the field-type for the injection
  target:
  
  [java.util.Map field type] Components of the specified role are assigned to 
    this field in a mapping of role-hint -> component.
    
  [java.util.List field type] Components of the specified role are assigned to
    this field in a List containing all of the components matching that role.
    As far as I can tell, this list is non-deterministic from the configured
    component's point of view, since I think it's determined by either a call to
    Map.values(), or the order in which the components were discovered, or 
    something similar.
    
  [java.util.Set field type] Components of the specified role are assigned to
    this field in a Set containing all of the components matching that role.
    Since Set's are unordered, the question of order within this collection is
    not as touchy as that of a java.util.List field type.
    
  While this arrangement is perfectly acceptable in the simplest situations,
  where a container is entirely configured from a single plexus.xml file and
  does not allow dynamic component introduction at runtime, it cannot adequately
  address some of the more advanced use cases of plexus (most notably, any of
  features introduced by an artifact-enabled container). It also cannot handle
  the case where "core" components are discovered and added as part of the 
  components.xml-based discovery process. Such core components might include
  things like component-factories, or other components which are mapped into 
  various handlers and handler-managers used directly by the container.
  
  The only solution to this non-refreshing issue is to introduce support for
  container-backed "active" collections for 1:N mappings within component
  structures.
  
* Examples and Discussion
  
  As a concrete example, suppose we're using a DefaultPlexusContainer (not
  an artifact-enabled container; we don't have to get into that yet) and that
  we want to allow the user of our application to optionally add support for
  non-java component factories, like the marmalade factory. Since the core
  components discovered during container initialization are in the plexus.xml
  file - of which only one is currently allowed per container - only the 
  component-factories in this resource will be discovered and added to the 
  component-factory-manager in the default, bare-bones configuration. Now,
  suppose the user adds the marmalade component-factory artifact to the
  container classpath, and restarts. This type, like before, the component
  factory manager receives a mapping with one entry, to the java factory. This
  takes place before discovery based on the components.xml is initiated. Now, 
  since the marmalade component factory cannot introduce a second plexus.xml
  (it is not allowed!), it configures itself via the components.xml, which is
  discovered, and the marmalade factory is added to the component repository.
  At this point, if anyone does a direct lookup of the component-factory role
  with a role-hint of "marmalade" they will indeed get a reference to the
  marmalade component factory. <<However>>, since the component factory manager's
  mapping of languages to factories has already been initialized, it does NOT
  get an updated mapping of factories, and therefore has no knowledge of the
  marmalade factory.
  
  In what would seem an answer to this issue, I have recently submitted a 
  proposal to add support for multiple plexus.xml files to the container
  initialization process. This would seem to solve the problem, since in this
  case the marmalade component factory could simply define a fragmentary
  plexus.xml file, and it would be discovered at initialization-time.
  
  However, consider a more involved example. This time, consider what happens
  when we use the artifact-enabled container to introduce a new component
  factory <<at runtime>>. The use case for this would be allowing the bare
  minimum configuration for an application like maven, while retaining the
  ability for a dynamically-added component to declare and load the component
  factory it needs to load itself on demand. If maven could use this, it could
  provide limitless language support for plugins, without bloating the core
  distribution at all. But there is a problem: even if we allow multiple
  plexus.xml files, the container has still been initialized by the time the
  first dynamic component addition can take place. This means that the container
  already has its static mapping of languages to component factories - again, 
  with a single mapping for the java language.
  
  The most elegant solution to this is to add support for dynamically-updated, 
  "active" 1:N mappings between collections. These collections would provide
  Collection-like support to components, but would delegate lookup calls to the
  container to retrieve the most up-to-date component collections. For instance,
  a ComponentFactoryManager which used an active map rather than a static one
  would support dynamic introduction of new component-factory instances 
  seamlessly.
  
* Implementation Details

** Supporting java.util.* Contracts

  The biggest advantage of supporting java.util.(Map|Set|List) contracts is that
  we can pass these component instances into sub-objects that have no concept of
  plexus, which can then use the collection generically. This is actually a 
  powerful option, to enable embedding of non-plexus-aware apps and APIs (jetty,
  or hibernate, for example).
  
  Even if we opt to implement the java.util.* contracts, there is nothing 
  stopping us from adding non-API methods for management, etc. It's possible
  that the plexus-aware APIs could deal with these collections as plexus-aware
  instances, and have access to additional APIs (perhaps implementing a plexus
  management interface or something).
  
  From my point of view, it is essential to implement the java.util.* contracts, 
  if for no other reason than embeddability of other applications and APIs 
  inside of plexus. In all likelihood, any usage of 1:N mapped components will
  use Collection-like API calls anyway, even if it is plexus-aware. So, we will
  probably have to implement these methods anyway, even if we decide to name 
  them something different.
  
** Collected-Component Management

  Without doubt, any active collection should allow the release of the contained
  component references, in order to act as a good citizen inside the plexus
  environment. The question that remains is how best to implement this release
  behavior:
  
  * Explicit releaseAll():void and release(Object):void methods on the active
    collection.
    
  * Calls to Collection.clear():void and Collection.remove(Object):void could 
    release any components referenced within.
    
  The first has the advantage of explicit knowledge about what the collection is
  doing...even if it also has the somewhat counter-intuitive side-effect that -
  since any component-owner that releases a component must relinquish it's own
  reference to that component - calls to release*() would result in the 
  collection being clear()'ed.
  
  The second is more in-line with the intention of the java.util.Collection
  contract, but may not be adequately plexus-aware (may not allow sufficiently 
  fine-grained control).
  
  My personal preference would be to integrate the release behavior with 
  Collection.clear(), etc. until we have a use case that dictates finer-grained
  control. This approach has the advantages of elegance and simplicity, not to
  mention that aforementioned advantage of being usable by all sorts of APIs and
  applications - thus improving embeddability.
  
** Mutability

  When dealing with collections of plexus components, it absolutely essential to
  restrict mutability to the container itself. If other components can modify 
  these mappings, the risk of misbehaving components losing references to 
  critical components is dramatically increased. In addition, such modification
  violates the semantics of the container environment itself. The premise that 
  the container alone has the ability to modify the runtime environment and 
  associated collection of components in the system will only be compromised by
  components with access to mutable component collections.
  
  It is important to note that immutable collections are perfectly within the
  contracts of the java.util.* interfaces (see Collections.unmodifiable*() for
  Sun-sanctioned examples). The also drastically reduce the complexity of any 
  "active" collection implementation, since you don't have to risk the dreaded
  ConcurrentModificationException and the like.

** iterator(), values(), keySet(), entrySet(), and Container Updates

  While a certain amount of the complexity surrounding these operations can be
  reduced by making the collection immutable from the component point of view,
  we still have to consider cases where the underlying container discovers new
  components. And while Iterators are usually considered short-lifecycle objects,
  there is nothing saying that they have to be. It's entirely permissable for a
  component or sub-object to hold onto an Iterator instance for long periods of
  time. Therefore, any Iterator derived from an active collection must deal with
  new component discovery, and the associated update. I mention Iterator's 
  primarily, since they have a notion of ordered elements, and a current place 
  within that order. Preserving this notion of current-index is the most complex
  issue surrounding externally-updated collection content, so it will inevitably
  be the largest section of this discussion.
  
  Iterator can have a SoftReference to the next() component, populated when/if
  the next() method is called. If reference == null, no next. If next.get() == null,
  throw ConcurrentModificationException...? If next() not called, then directly
  lookup the next component from the set of keys...
  
  More formally:
  
  [ComponentMappingIterator] Iterator implementation which keeps a running list
    of the role-hints that it has iterated over, and a SoftReference to the next
    component to be iterated over when using hasNext()->next().
    
    Fields:
    
    [visitedRoleHints:java.util.List]
    
      Used to track the role-hints already visited, in case they change order
      between iteration-steps. As hasNext() or next() is called, each 
      next-component's role-hint is stored in here to avoid revisiting that
      component in the event the component ordering is changed by some sort of
      container-spawned jiggering. Searches for a next-component will only
      succeed if the next-component is found, and the corresponding role-hint
      is not in this list.
    
    [nextComponent: java.lang.ref.SoftReference]
    
      Used to store the component reference resulting from searching for a
      "next" component, as in resulting from a call to hasNext():boolean. The
      following states are possible for this field:
        
      * If hasNext() is never called, the field will be null.
      
      * If hasNext() is called, and returns false, the field will be null.
      
      * If hasNext() returns true, and the component has not been unloaded
        from the container (and thus garbage-collected), this field will
        contain a reference to the next component to be returned as a result
        of the next() method call.
          
      * If hasNext() returns true, and the component has been unloaded from
        the container (and garbage-collected), this field will contain a
        SoftReference that references null. That is, SoftReference.get() will
        return null.
  
    [hasNextCalled: boolean]
    
      Used to flag when hasNext() is called, but next() has not yet been 
      called. This is useful because it will determine the difference between
      hasNext() being called and not finding anything, and hasNext() not being
      called. In the former case, the next() method should NOT try to find a
      next-component. In the latter case, we don't know what's out there, so 
      a call to next() should search for a next-component.
        
      The following states are possible for this field:
        
      * If hasNext() is not called, this field is false.
      
      * If hasNext() is called, and next() has not been called, this field
        is true.
      
      * When next() is called, this field is set to false again. That way, 
        successive calls to next() will result in these calls searching for
        successive next-components.

    Methods:
    
    [findNextComponent():java.lang.Object]
    
      Asks the container for a list of role-hints corresponding to the role this
      Iterator was constructed with. Using this list, and 
      
      
<<NOTE:>> I need to sleep on this for the evening...I can't see the solution for
now.