 -----
Plexus Applications and Runtimes
 -----
Trygve Laugstol
 -----

Building Plexus Applications and Runtimes

 To be able to build Plexus applications and runtimes you'll need:

 * The Plexus mojo

 * The Plexus application archetype

 * The Plexus runtime archetype

 <<<TODO: Make a link to the maven site that explains what a archetype is.>>>

Creating the Enviroment

 To start off we'll make some stub directories:

+-----------------------------------------------------------------------------+
$ mkdir my-application
$ mkdir my-runtime
+-----------------------------------------------------------------------------+

 [<<</my-application>>>] - Here we'll make a application

 [<<</my-runtime>>>] - Here we'll make a runtime that will host your
  application.  This runtime will contain startup scripts for Unix, Windows and
  OS X and will be completly standalone.

Creating a Simple Plexus Application

* Making the Application Stub

 In <<</my-application>>> execute this to make a stub Plexus application:

+-----------------------------------------------------------------------------+
$ m2 archetype:create \
    -DarchetypeGroupId=plexus \
    -DarchetypeArtifactId=plexus-archetype-application \
    -DarchetypeVersion=1.0-alpha-1-SNAPSHOT \
    -DgroupId=mygroup \
    -DartifactId=my-application \
    -Dversion=1.0 \
    -Dpackage=my.app
+-----------------------------------------------------------------------------+

* Building the Plexus Application

  <<TODO: plexus:app should not copy *.pom into /lib>>

 To build the application simply type:

+-----------------------------------------------------------------------------+
$ m2 plexus:app
+-----------------------------------------------------------------------------+

 and you should have a application in <<<target/plexus-application>>>. Inside
 the exploded application there will be two directories: <<<conf>>> and
 <<<lib>>>. The <<<conf>>> directory contains the configuration file for your
 application and <<<lib>>> contains all the dependencies the application has.

 If you want to do some extra processing on these files or possibly add your
 own files you can have a plugin with a post goal on <<<plexus:app>>> and it
 would be invoked before the application was packaged.

 If you now run the <<<plexus:bundle-application>>> goal:

+-----------------------------------------------------------------------------+
$ m2 plexus:bundle-application
+-----------------------------------------------------------------------------+

 the resulting JAR file will be ready for deployment in a Plexus runtime. Our
 example application JAR will be
 <<<target/my-application-1.0-application.jar>>>.

Creating the Runtime

* Making the Runtime Stub

 Creating the stub runtime is as easy as creating the application. In
 <<</my-runtime>>> execute:

+-----------------------------------------------------------------------------+
$ m2 archetype:create \
    -DarchetypeGroupId=plexus \
    -DarchetypeArtifactId=plexus-archetype-runtime \
    -DarchetypeVersion=1.0-alpha-1-SNAPSHOT \
    -DgroupId=mygroup \
    -DartifactId=my-runtime \
    -Dversion=1.0 \
    -Dpackage=my.runtime
+-----------------------------------------------------------------------------+

* Building the Runtime

  <<TODO: plexus:runtime shouldn't depend on jar:install. In fact it probably
  shouldn't copy the artifact at all as the output of a "plexus runtime"
  project is the runtime itself.>>

+-----------------------------------------------------------------------------+
$ m2 plexus:runtime
+-----------------------------------------------------------------------------+

 You should now have a usable runtime in <<<target/plexus-runtime>>> and a
 packaged runtime in <<<target/my-runtime-1.0-runtime.jar>>>. Now lets copy
 over the application:

+-----------------------------------------------------------------------------+
$ cp ../my-application/target/my-application-1.0-application.jar \
     target/plexus-runtime/apps
+-----------------------------------------------------------------------------+

 Now you have a working Plexus runtime with your application installed. To
 start it run:

+-----------------------------------------------------------------------------+
$ sh target/plexus-runtime/bin/plexus.sh
+-----------------------------------------------------------------------------+

 Hopefully you should now have a runtime running with

Getting fancy: Adding a Shared Servlet Container

 Plexus runtimes can have a set of services thats shared between the applications.
 One very useful service is a servlet container. This enables several isolated applications
 to share the same Jetty instance without the need for complicated Apache HTTPD proxy
 setups. The servlet container service will all the web in a configured
 directory. The application contains a commented out configuration section for
 the servlet container which you must uncomment so the service would be
 enabled.

 <<<TODO: Give a example on how to download the service from the web.>>>

 <<<NOTE: This example assumes that you have the runtime that was created in the last section.>>>

 First copy the service into the runtime:

+-----------------------------------------------------------------------------+
$ cp plexus-service-jetty-1.0-alpha-1-SNAPSHOT-service.jar \
     my-runtime/target/plexus-runtime/services
+-----------------------------------------------------------------------------+

 Now we need to add a web application to the application.  As a simple web
 application we're using the Jetty JavaDocs. You can get them from
 <<<http://repo1.maven.org/jetty/wars/javadoc-4.2.23RC0.war>>>. Execute these
 commands from <<</my-application>>>

+-----------------------------------------------------------------------------+
$ mkdir target/plexus-application/webapps
$ cp ~/.m2/repository/jetty/wars/javadoc-4.2.23RC0.war \
     target/plexus-application/webapps
+-----------------------------------------------------------------------------+

 Now we need to configure the servlet container service so it knows where to
 find the web applications. In src/conf/application.xml uncomment the servlet
 container section. Now bundle the application again:

+-----------------------------------------------------------------------------+
$ m2 plexus:bundle-application
+-----------------------------------------------------------------------------+

 Remove the old application deployment and and copy over the new version.
 Execute these commands from <<</my-runtime>>>

+-----------------------------------------------------------------------------+
$ rm -rf target/plexus-runtime/apps/*
$ cp ../my-application/target/my-application-1.0-application.jar \
     target/plexus-runtime/apps
+-----------------------------------------------------------------------------+

 Now when the application server is started again it should

 * Deploy the servlet container.

 * Boot Jetty.

 * Deploy the application.

 * The servlet container will detect that a new application was deployed and deploy the JavaDoc WAR.

 So lets start it:

+-----------------------------------------------------------------------------+
$ sh target/plexus-runtime/bin/plexus.sh
+-----------------------------------------------------------------------------+
