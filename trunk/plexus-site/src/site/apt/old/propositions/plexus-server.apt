 -----
 Plexus Server
 -----
 Trygve Laugstol
 -----
 25 May 2005

<<This is an old piece of documentation, yet to be integrated into the new site and removed>>

Plexus Server

 This is a document describing the Plexus Server and all related tools

* Plexus Server Goals

 These are the goals of the Plexus Server:

 * Ability to be completly embedded without requiring a file system.

   This is useful when testing a application from within a Mojo.

 * Adding applications and services at runtime.

   When running it should be possible to deploy a new application while all other
   applications are running.

 * Application downloading

   The server should be given a URL and be able to download, install and start that
   application.

 * Application installation

   A application should be though a "installation phase" before beeing started so it can
   create any directories it requires, check for access to servers etc.

 * Application configuration

   Each application has a configuration which can be changed at least when the application
   is stopped but also possible during runtime. The application that does the actual
   configuration management is outside the scope of the application server itself. It should
   probably be a application itself with access to the core.

 * Storing the state

   The server should remember which applications that was started when it
   shut down and should then start these applications on boot.

* Plexus Server Technical Parts

** Deficiensies with the current appserver

 * The entire application server is a single artifact, incluing:

   * <<<PlexusService>>> component interface that the services implement.
    This make the services depend on the core

   * It has a XML-RPC server and client. This should be a addition to the core itself.

   * There is no real API that the applications can implement to get notified of
    application lifecycle events.

 * The runtime, application and service builders don't use the same code for reading and
   writing the application and service descriptors.

 * The Maven Mojos doesn't use the deployer code to deploy the applications and services.
   These mojos should boot the application server, add the applications and services
   and shut down the application server again.

   This will give obvious advantages as avoiding duplicating code between the mojos and
   the application server and if the mojos use the application servers deployers it will
   make the mojos more robust in terms of internal changes to the server as the server will
   handle everything.

** Suggested Actions

 * Split out a "Plexus Server API" This API will contain:

   * The <<<PlexusService>>> interface

   * The external Plexus components that's useful to the services and mojos.

   * The application descriptors and runtime profiles. These are names and concepts used in
     the current appserver, I'm sure there area better names for this.

 * Remove or move out everything related to XML-RPC. This can be added back later but it
   should only have a dependency on the core APIs.

** Artifacts

 This is based on a few experiments I did a late night so don't consider this final in
 any way. I'm calling this "Plexus Server" instead of "Plexus Application Server" to  avoid
 confusion with the existing appserver code. Each bullet is a artifact.

 * <<<plexus-server-application-api>>>: All Plexus applications will depend on this
   artifact. The only thing it contains is the <<<PlexusApplication>>> interface which
   contains these methods:

   * <<<start()>>>

   * <<<stop()>>>

   []

   I haven't though through how the installation part of the lifecycle will be handles but
   I envision methods like <<<install()>>> or <<<setup()>>> on this interface.

 * <<<plexus-server-api>>>: All Plexus services and extensions to the application server
   will depend on this artifact. Interfaces:

   * <<<PlexusService>>>: This is basically the same interface as earlier with the same
     methods:

     * <<<beforeApplicationStart()>>>

     * <<<afterApplicationStart()>>>

   * <<<ApplicationBuilder>>>: This component is modelled much like the
     <<<ContinuumProjectBuilder>>> in Continuum which takes a URL and creates
     <<<ApplicationDescriptor>>>.

   []

   Beans:

   * <<<ApplicationDescriptor>>>: A bean describing a application. Properties:

     * <<<id>>>

     * <<<name>>>

     * <<<configuration>>>: A PlexusConfiguration object

     * <<<classpath>>>: A list of URLs.

 * <<<plexus-server-core>>>: The implementation of the Plexus Server.

   * <<<JarApplicationBuilder>>>: This is the default deployer and will unpack a jar file,
     find <<<conf/application.xml>>> and build the application descriptor.

   * <<<ApplicationRepository>>>: A database/store for the application descriptors. This
     keeps the state and configuration of the applications.

 * <<<plexus-application-builder-maven>>>: This will take a POM, resolve all the artifacts
   and build a application descriptor. When running from inside a Mojo it should be
   configured to use the local repository of the Maven 2 instance so the resolving step
   basically is void and the application will run directly from the local repository.

   If the Mojo is aware of other projects when executing it can change the classpath of the
   application to use the <<<target/>>> directory of the artifact's source directory instead
   of the installed jar. This will save yet another step when deploying as you don't have
   to go through Maven at all to get the Plexus application get your new class files.
   Combined with using Janino or BeanShell we can go so far as to have the application
   server automatically redeploy a single class as we also know about the source paths for
   a project.

   In the next section I describe the suggested modes of usage for the application server
   and in the two latter cases this application builder would be configured with a local
   repository inside the application directory so when executed it will either

   * Download the missing artifacts and go to the next step.

   * Build the classpath from the repository.

 []

** Deployment

 I'm three several ways of using the application server:

 * <Through a mojo>: Using it through a Mojo will be one option where the Mojo embeds the
   appliaction server, calls the core to add the application (if it's not there) and starts
   it. A nice feature that is possible here is that since the Mojo knows about the Maven
   project it can add the src/main/resources directory to the front of the classpath or as a
   resources directory inside the Plexus container so that the configurations will be
   automatically reloaded upon changes.

 * <As a single application.> I would like to make this the standard packaging mode for
   Continuum. This will make Continuum look and feel like a normal application but it's
   in reality a unpacked Plexus application which is added upon startup by a special CLI.

 * <A full fledged application server.> This will be much like it's working today with
   a <<<apps/>>> and <<<services/>>> directories.

=======================================================================

APT Reference

  Paragraph 1, line 1.
  Paragraph 1, line 2.

  Paragraph 2, line 1.
  Paragraph 2, line 2.

Section title

* Sub-section title

** Sub-sub-section title

*** Sub-sub-sub-section title

**** Sub-sub-sub-sub-section title

      * List item 1.

      * List item 2.

        Paragraph contained in list item 2.

            * Sub-list item 1.

            * Sub-list item 2.

      * List item 3.
        Force end of list:

      []

+------------------------------------------+
Verbatim text not contained in list item 3
+------------------------------------------+

      [[1]] Numbered item 1.

                [[A]] Numbered item A.

                [[B]] Numbered item B.

      [[2]] Numbered item 2.

  List numbering schemes: [[1]], [[a]], [[A]], [[i]], [[I]].

      [Defined term 1] of definition list.

      [Defined term 2] of definition list.

+-------------------------------+
Verbatim text
                        in a box
+-------------------------------+

  --- instead of +-- suppresses the box around verbatim text.

[Figure name] Figure caption

*----------*--------------+----------------:
| Centered | Left-aligned | Right-aligned  |
| cell 1,1 | cell 1,2     | cell 1,3       |
*----------*--------------+----------------:
| cell 2,1 | cell 2,2     | cell 2,3       |
*----------*--------------+----------------:
Table caption

  No grid, no caption:

*-----*------*
 cell | cell
*-----*------*
 cell | cell
*-----*------*

  Horizontal line:

=======================================================================

^L
  New page.

  <Italic> font. <<Bold>> font. <<<Monospaced>>> font.

  {Anchor}. Link to {{anchor}}. Link to {{http://www.pixware.fr}}.
  Link to {{{anchor}showing alternate text}}.
  Link to {{{http://www.pixware.fr}Pixware home page}}.

  Force line\
  break.

  Non\ breaking\ space.

  Escaped special characters: \~, \=, \-, \+, \*, \[, \], \<, \>, \{, \}, \\.

  Copyright symbol: \251, \xA9, \u00a9.

~~Commented out.