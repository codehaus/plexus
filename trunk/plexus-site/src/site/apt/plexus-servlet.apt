Plexus Servlet

h1. How to use Plexus in web applications

h2. Configuration
Plexus Servlet project exists for simplifying embeding and usage of plexus in context of web applications which run inside the
servlet container.

There are two ways  of embedding Plexus.  First  one is via registration Plexus [ServletContextListener|http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/ServletContextListener.html],
second one via registration of Plexus Loader Servlet.

The first way is suported by servlet containers which are compilant with servlet specification 2.3 or higher.
Second one should be used for compatibility with older versions of servlet containers


h3. First (recommended) way of embedding Plexus:
{code:xml}
<web-app>
     ...
    <listener>
        <listener-class>org.codehaus.plexus.servlet.PlexusServletContextListener</listener-class>
    </listener>
     ...
<web-app>
{code}


h3. Second way of embedding Plexus:

 {code:xml}
  <servlet>
        <servlet-name>plexus</servlet-name>
        <servlet-class>org.codehaus.plexus.servlet.PlexusLoaderServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
 {code}



In both cases by default Pleuxs Embedder will search  for the configuration files in the following locations:


* _/WEB-INF/plexus.xml_   (for main plexus configuration file)
* _/WEB-INF/plexus.properties_  (for properties file which is used for seeding plexus context)


Those location can be overidden

TODO: explain how



In both cases new instance of PLexus Conatiner will be created and stored in _"application"_ scope of given web application under the
key: org.codehaus.plexus.PlexusConstants.PLEXUS_KEY



h2.  How to lookup and release components
h3. In Servlet

{code}
ServletContext context = getServletContext();
VelocityComponent velocityComponent = ( VelocityComponent ) PlexusServletUtils.lookup( context, VelocityComponent.ROLE );
...

PlexusServletUtils.release( context, velocityComponent );
{code}


h3.  In JSP

{code}
<%

VelocityComponent velocityComponent = ( VelocityComponent ) PlexusServletUtils.lookup( application, VelocityComponent.ROLE );

...

PlexusServletUtils.release( application, velocityComponent );

%>
{code}

h3. In Struts Action or in similar case ( I think we should move it to Plexus-Servlet project as this is often neeed):

{code}
public abstract class BaseAction extends Action
{


    protected Object lookup( HttpServletRequest request, String role ) throws ServletException
    {
        HttpSession session = request.getSession();

        ServletContext application = session.getServletContext();

        Object retValue = PlexusServletUtils.lookup( application, role );

        return retValue;
    }


    protected void release( HttpServletRequest request, Object component ) throws ServletException
    {
        HttpSession session = request.getSession();

        ServletContext application = session.getServletContext();

        PlexusServletUtils.release( application, component );

    }


    void someAction( HttpServletRequest request )
    {
           VelocityComponent velocityComponent= ( VelocityComponent ) lookup( request,  VelocityComponent.ROLE  );


            ....

             release( request, velocityComponent );


    }

}
{code}


In case when access to the instance of PlexusContainer object is needed you can use:

{code}
PlexusContainer getPlexusContainer( ServletContext servletContext )
{code}

method



h3. Required artifacts

[http://www.ibiblio.org/maven/plexus/jars/plexus-servlet-1.0-beta-2-SNAPSHOT.jar]


Maven dependecy:

{code:xml}
  ....
       <dependency>
            <groupId>plexus</groupId>
            <artifactId>plexus-servlet</artifactId>
            <version>1.0-beta-2</version>
            <properties>
                <war.bundle>true</war.bundle>
            </properties>
        </dependency>
  ....
{code}