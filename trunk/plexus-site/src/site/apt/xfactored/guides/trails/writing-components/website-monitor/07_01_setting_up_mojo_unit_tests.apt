 -----
Using a Plexus Component from a Maven Mojo.
 -----
Rahul Thakur
 ----
27th June 2006 
 ------

 <<<The contents of this document are a work in progress>>>

Setting up unit tests for Monitor Mojo 

 Unit testing allows us to test out our Mojo implmentation without requiring a
 project to be set up. 

 Maven provides a <<Plugin Test Harness>> to enable testing of Mojos. 

 Some relatively comprehensive notes on the Maven Plugin Harness are available {{{http://docs.codehaus.org/display/MAVEN/Maven+Plugin+Harness}here}}.

* Adding test sources directory to the project 

  This step is needed as the Mojo Archetype (as of this writing) does not sets
  up test folder when we created our Maven plugin project.

  [[1]] To the project root add a directory <<<src/test/java>>>. We will create
  our unit tests under this location. 


* Adding plugin test harness dependency

  [[1]] First thing we need to do is to add the Maven plugin test harness 
  dependency to our Plugin's <<<pom.xml>>>. Locate the <<<pom.xml>>> and add 
  the harness dependency as follows.

+----------------------------+  
  <dependencies>
    .
    .
    .
   <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-plugin-testing-harness</artifactId>
      <version>1.0-beta-1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
+----------------------------+  

  [[1]] Next we need to update depdendency references in our Eclipse project 
  settings to make the plugin testing harness available. To do this run the 
  following from the command prompt from the plugin project's directory.

+----------------------------+
 mvn eclipse:clean eclipse:eclipse
+----------------------------+

  [[1]] Refresh the Eclipse project by selecting the project root folder and 
  pressing 'F5' key. 

  You will see that the plugin testing harness dependency and the test 
  directory that we added in the previous step are now updated. 

* Writing our first Mojo unit test
  
  [[1]] Create a new package <<<org.codehaus.plexus>>> to create our test in.
  Note that we create the package with the same name that our Mojo 
  implementation resides in. This is a convenience to test out methods on Mojo
  which can have access specifiers to allow access from within same package.
  


  


