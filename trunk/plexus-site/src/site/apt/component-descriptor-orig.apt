<<This is an old piece of documentation, yet to be integrated into the new site and removed>>

h3. Overview
For each component plexus creates a component profile.   The profiles keeps track of the following things for each component:
* [Component Factory]
* [Lifecycle Handler]
* [Component Composer]
* [Instantiation Strategy]
* The configuration for the component

Within plexus there are various places that you can configure your component.  When plexus is loaded it is provided with a configuration file.  However, you can also stick configurations in your component jars as this will describe later.  Then they will be automatically discovered.

h3. Component Descriptor
Let's take a look at the component descriptor.  It starts off with a block for the component:
{code:xml}
<component>
{code}
You can then declare the role and the role hint of the component.  The role and the hint are what you use to look up your component from plexus.  The hint is optional.  The hint is just an extra id that allows you to differentiate components of the same type.
{code:xml}
 <role>org.codehaus.plexus.Component</role>
 <role-hint>component1</role-hint>
{code}
The implementation attribute tells plexus what you want to use to implement the specified role:
{code:xml}
  <implementation>org.codehaus.plexus.DefaultComponent</implementation>
{code}
You can specify how your class should be created via the component factory.  The default is java.  But, there are additional [Component Factories] as well for groovy, bsh, and jpython.
{code:xml}
  <component-factory>java</component-factory>
{code}
If you want to use a personality that is not the default personality, you can specify a lifecycle handler.  You will need this when you are mixing and matching component personalities.
{code:xml}
  <lifecycle-handler>avalon</lifecycle-handler>
{code}
Then, there is the instantiation strategy.  This controls how often plexus creates your components.  There are the following options:
||Strategy||Description||
|per-lookup|Every time you lookup a component one will be created.|
|singleton|Only one instance of your component will ever be created.|
|keep-alive|This ensures a component is only used as a singleton, and is only shutdown when the container shuts down.|
|poolable|Pools several component instances.

{color:red}
It will be nice to describe what are the properties of the default pool  e.g.  its size and give an example how to change those settings (another ComponentManager must be defined)
{color}

The default is singleton and you can change the strategy like this:
{code:xml}
  <instantiation-strategy>per-lookup</instantiation-strategy>
{code}
There are also several different ways in which you can compose your component (see [Plexus Personality]).
||Composition Type||Description||
|field|Injects the dependencies of your component into private fields|
|setter|Sets your component's dependencies through setXXX methods.|
|noop|Don't use any component composition.|

If you want to the default component composer (field) you don't have to specify which "composer"
should be used for given component.

In other case you can inform plexus that you want use for example _setter_ component composer.
{code:xml}
  <component-composer>setter</component-composer>
{code}

How does plexus know what fields to compose?  There is a requirements section where you declare what components you depend on:
{code:xml}
<requirements>
 <requirement>
      ....
 </requirement>
 <requirement>
      ....
 </requirement>
</requirements>
{code}


Inside  <requirement> tag follwing child tags are supported:

||Tag name||Description||
|role||
|role-hint||
|field|(MICHAL: I would rename it to property).|
|version|Not yet .|

In simple case declaration of dependecy looks like follows:
{code}
 <requirement>
      <role>org.codehaus.plexus.ComponentA</role>
 </requirement>
{code}

In case when you want to declare a dependecy on the component which has specified both role and role-hint attributes you can do:
{code}
 <requirement>
      <role>org.codehaus.plexus.ComponentB</role>
      <role-hint>foo</role-hint>
 </requirement>
{code}

In any case Component Composer will try to find matching field, property for given requirments.
In standard case component composer will try to find a private field which has a type which matches requirement's role.

{code}
public class SomeComponentImpl
{
     org.codehaus.plexus.ComponentA  a;
     org.codehaus.plexus.ComponentB  b;
}
{code}


Plexus can also inject Maps, List or Arrays of components.
In case of arrays component composers should use the same approche which is applied in case of case of "singular"
dependencies:


For field injection:
{code}
public class SomeComponentImpl
{
     org.codehaus.plexus.ComponentA  a[];
}
{code}

For setter injection:
{code}
public class SomeComponentImpl
{
     org.codehaus.plexus.ComponentA  a[];

     public void setA( org.codehaus.plexus.ComponentA  a[] )
     {
          this.a = a;
      }

}
{code}



In case of List, or Maps you must explicitly define where dependecies should be injected.

{code:xml}
<component>
  ...
  <requirements>
    <requirement>
        <role>org.codehaus.plexus.ComponentB</role>
        <role-hint>foo</role-hint>
        <field>mapA</field>
    </requirement>
    <requirement>
        <role>org.codehaus.plexus.ComponentB</role>
        <role-hint>baa</role-hint>
        <field>listB</field>
    </requirement>
  </requirements>
</component>
{code}

(Field Injection)
{code}
public class SomeComponentImpl
{
       private Map mapA;
       private List listB;
}
{code}




Note that in case of Maps value of component's <role-hint> is used as key and component instance as value.


You can also use <field> tag for "singular" component's requirements.

{code:xml}
<component>
  ...
  <requirements>
    <requirement>
        <role>org.codehaus.plexus.ComponentB</role>
        <role-hint>foo</role-hint>
        <field>
    </requirement>
    <requirement>
        <role>org.codehaus.plexus.ComponentB</role>
        <role-hint>baa</role-hint>
        <field>b2</field>
    </requirement>
  </requirements>
<component>
{code}


{code}
public class SomeComponentImpl
{
     org.codehaus.plexus.ComponentB  b1;     (component having role-hint = "foo" will be injected here)
     org.codehaus.plexus.ComponentB  b2;     (component having role-hint = "baa" will be injected here)
}
{code}



Explict specification where Component Composer should injected dependencies is considered to be a good pattern and might be even required in future versions of Plexus. We will probably need to add one more tag which will hold the information
about the cardinality of injected dependecies (in order to know if it was  ComponentA, ComponentA [], List or Map).




Last, there is an optional configuration section which is used to configure your component.
{code:xml}
<configuration>
  <custom-field>bleh</custom-field>
</configuration>
{code}

And that's the end of the component configuration!
{code:xml}
</component>
{code}

*NOTE:* Descriptors cannot tell plexus to load components on start.  You must still do this in the main plexus configuration.


h3. Ideas for the future

* It will be nice to define precisly which fields should be used by xstream and have a possiblity to define required aliases. This will:
   ** remove the necessity to use <tag implementation""> thing
   ** enable to use xstream for saving component descriptors (then we will really need to select which fields needs to be serialized and teach xstream to use only those fileds)