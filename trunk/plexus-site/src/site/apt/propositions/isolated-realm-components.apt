 -----
 Isolated Realm Components
 -----
 Plexus Hoard
 -----
 
Isolated Realm Components

 Components that wants to be in a realm of its own, along with its
 dependencies, specifies this in its components descriptor:

+-----+

<component-set>
  <component>
    <role>org.codehaus.plexus.component.BigComponent</role>
    <implementation>org.codehaus.plexus.component.DefaultBigComponent</implementation>
    <isolatedRealm>true</isolatedRealm>
  </component>
  <dependencies>
    <dependency>
      <groupId>plexus</groupId>
      <artifactId>plexus-foo</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>plexus</groupId>
      <artifactId>plexus-foo</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
  </dependencies>
</component-set>

+-----+

How component addition works in the artifact enabled container

 Currently, components that require isolation are added using the special artifact enabled container.
 When a component is added to the artifact enabled container it is added as an artifact which is
 a JAR located in a repository. When the components contained in the artifact are added to
 the artifact enabled container a temporary <<<ClassRealm>>> is created in order to discover
 the components that are contained within the artifact.

 What the artifact enabled container actually discovers is a component set descriptor that looks like
 the component set descriptor you see above. The component set descriptor contains invidual component
 descriptors along with any depenencies that are required for the components to function at runtime.

 The dependencies may contain a mixture of simple dependencies and component dependencies. Simple
 dependencies are what you might expect in that they simply contain class files. Component dependencies
 are dependencies which themselves contain component descriptors and are requirements of the component
 that wants to run in isolation.

 For each component found in the discovered component set descriptor we create a realm which contains
 all the dependencies listed in the component set descriptor. This is a bit of duplication but having a
 seaparate realm for components that want to be isolated makes it simpler inside the container for
 the time being.

Changes

 These are the proposed changes that would allow the <<<ClassRealm>>> used to instantiate a component
 and its requirements.

 * Container lookup methods will need to take a <<<ClassRealm>>> parameter so that we can control which
   realm is used to instantiate the component and its requirements.

 * ComponentManager.getComponent() will be modified to ComponentManager.getComponent( ClassRealm realm ) and
   ComponentManager.createObjectInstance() will be modified to ComponentManager.createObjectInstance( ClassRealm realm ).

 * ComponentManager.startComponentLifecycle( Object component ) would be modified to
   ComponentManager.startComponentLifecycle( Object component, ClassRealm realm ). This is required so that the
   composition phase of a component has access to the ClassRealm that should be used to lookup components
   that are requirements.

 * LifecycleHandler.startLifecycle( Object component, ComponentManager cm ) will be modified to
   LifecycleHandler.startLifecycle( Object component, ComponentManager cm, ClassRealm realm ) so
   the composition phase has access to the ClassRealm.

 * Container.createComponentInstance( ComponentDescriptor cd ) will be modified to
   Container.createComponentInstance( ComponentDescriptor, ClassRealm realm ).

 * AbstractPhase.execute( Object component, ComponentManager cm ) will be modified to
   AbstractPhase.execute( Object component, Componentmanager cm, ClassRealm realm ). This means
   that all the phases will have to change as well.

 * Container.composeComponent( Object component, ComponentDescriptor componentDescriptor ) will be modified
   to Container.composeComponent( Object component, ComponentDescriptor componentDescriptor, ClassRealm realm )

 * ComponentComposer.assembleComponent( Object component, ComponentDescriptor componentDescriptor, PlexusContainer container )
   will be modified to
   ComponentComposer.assembleComponent( Object component, ComponentDescriptor componentDescriptor, PlexusContainer container, ClassRealm realm ).

~~ jason's random notes
~~ many components
~~ each may create a realm with duplicated deps but it should work
~~ for each component we need to create a realm but we don't want to create realms for any components that are dependencies
~~ the problem is the lookup where we need to find the realm of the isolated component
~~ i need to change the way the factory works so that the same realm can be used for a set of components
~~ need a way to lookup components within a context -- i need to use the same realm for a series of lookups
