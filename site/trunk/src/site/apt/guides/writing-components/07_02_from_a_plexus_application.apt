 -----
Using a Plexus Component from a Plexus application.
 -----
Rahul Thakur
 ----
08th June 2006 
 ------

 <<<The contents of this document are a work in progress>>>

Plexus Website Monitor Application

 This section will show how to use a Plexus component in a Plexus application.

* Setting up a Plexus Application project

** Creating a Plexus application project using an archetype

  Maven Archetypes are discussed in detail {{{http://maven.apache.org/guides/mini/guide-creating-archetypes.html}here}}.

  [[1]] From the command prompt, change directory to the location where you 
  want to setup the Plexus application project.

  [[1]] Run the following command to set up a skeleton Plexus Application project.  


+------------------------------------------+

 mvn archetype:create -DarchetypeGroupId=org.codehaus.plexus -DarchetypeArtifactId=plexus-archetype-application \
     -DarchetypeVersion=1.0-alpha-1-SNAPSHOT -DgroupId=org.codehaus.plexus -DartifactId=plexus-website-monitor-application \
     -DremoteRepositories=http://snapshots.repository.codehaus.org/

+------------------------------------------+

 The <<<maven-archetype-mojo>>> sets up a skeleton Maven plugin project '<<<plexus-website-monitor-application>>>' for 
 us with reasonable defaults.

 
** Updating pom.xml dependencies

  [[1]] Locate pom.xml under the '<<<plexus-website-monitor-application>>>' folder. 

  [[1]] Edit it and add a <<<dependency>>> to the 
  plexus-website-monitor-component that we have developed in earlier chapters.

  [[1]] We also configure a 

    The pom.xml should look like this now:

+------------------------------------------+

<?xml version="1.0"?><project>
  <parent>
    <artifactId>plexus-examples</artifactId>
    <groupId>org.codehaus.plexus.examples</groupId>
    <version>1-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.codehaus.plexus</groupId>
  <artifactId>plexus-website-monitor-application</artifactId>
  <packaging>plexus-application</packaging>
  <version>1.0-SNAPSHOT</version>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.plexus</groupId>
        <artifactId>plexus-appserver-maven-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <configurationDirectory>src/conf</configurationDirectory>
          <applicationName>foo</applicationName>
          <applicationConfiguration>src/conf/application.xml</applicationConfiguration>
          <configurationProperties>src/plexus.properties</configurationProperties>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-website-monitor-component</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>    
  </dependencies>
</project>

+------------------------------------------+


** Setting up an IDE project

  Before we proceed further let us set up an Eclipse project for our Plexus application project. To do so currently, and as a workaround we comment out the generated <<<<packaging>>>> element in the <<<pom.xml>>> and add a <<<<packaging>>>><<<jar>>><<<</packaging>>>>. To generate an Eclipse project: 

  [[1]] Open up a command prompt/terminal, and

  [[1]] run the following command 

+-------------------------------------------+  

>  mvn eclipse:clean eclipse:eclipse 

+-------------------------------------------+

 Import the generated project under an Eclipse Project. 



** Adding an Application Entry Class 

 For any standalone Java application, we need a Class that defines a <<<main>>> method; the case of Plexus application is no different. We add a Application main class for our application (don't worry about the implementation details yet). 


 We create a folder for Java sources <<<src/main/java>>> and add a sensible package for the main class. For this trail, we have created the package <<<org.codehaus.plexus.site.monitor>>> and create a main class <<<Main.java>>> under it. 

 The generated source with a <<<System.out.println()>>> looks like below: 

+-------------------------------------------+

public class Main
{

    public static void main( String[] args )
    {
        System.out.println ("Hello Plexus application!");

    }

}

+-------------------------------------------+

  Having imported the project and added a main class, we now revert the <<<packaging>>> back to value <<<plexus-application>>>.









  ~~TODO: Add and explain 'appassembler' mojo config for a Plexus application.
