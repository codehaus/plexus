Introduction To Components


<<This is an old piece of documentation, yet to be integrated into the new site and removed>>

What are components?  Well, that is highly debated.
[Szyperski|http://www.amazon.com/exec/obidos/ASIN/0201745720/qid%3D1090125966/sr%3D11-1/ref%3Dsr%5F11%5F1/104-8989869-2491134] list several characteristics of components: composition, units of deployment and resuability. However some of these people may have other definitions:
* [PicoContainer|http://picocontainer.codehaus.org/Components]
* [Avalon|http://avalon.apache.org/central/cop/index.html]
* [C2 - Component Oriented Programming|http://c2.com/cgi/wiki?ComponentOrientedProgramming]
* [Component Software|http://www.amazon.com/exec/obidos/ASIN/0201745720/qid%3D1090125966/sr%3D11-1/ref%3Dsr%5F11%5F1/104-8989869-2491134]


h5. More popular attempts to define what component is:

* A component is a nontrivial, nearly independent, and replaceable part of a system that fulfils a clear function in the context of a well-defined architecture. A component conforms to and provides the physical realization of a set of interfaces. (Philippe Krutchen, Rational Software)

 * A runtime software component is a dynamically bindable package of one or more programs managed as a unit and accessed through documented interfaces that can be discovered at runtime. (Gartner Group)

* A software component is a unit of composition with contractually specified interfaces and explicit context dependencies only. A software component can be deployed independently and is subject to third-party composition. (Clemens Szyperski, _"Component Software"_)

* A self-contained piece of software that can be independently deployed and plugged into an environment that provides a compatible socket. It has well-defined run-time interfaces, and it can cooperate out of the box with other components (Peter Herzum, Olivier Sims, _"Business Component Factory"_)


* Heineman and Council:
** "A software component is a software element that conforms to a component model and can be independently deployed and composed without modification according to a composition standard."
 ** "A component model defines specific interaction and composition standards. A component model implementation is the dedicated set of executable software elements required to support the execution of components that conform to the model."
** "A software component infrastructure is a set of interacting software components design to ensure that a software system or subsystem constructed using those components and interfaces will satisfy clearly-defined performance specifications."


h3. [#Criteria for components]
Meyer: ["Seven Criteria for Components:|http://www.sdmagazine.com/documents/s=746/sdm0003k/0003k.htm]

# May be used by other software elements (clients).
# May be used by clients without the intervention of the component's developers.
# Includes a specification of all dependencies (hardware and software platform, versions, other components).
# Includes a precise specification of the functionalities it offers.
# Is usable on the sole basis of that specification.
# Is composable with other components.
# Can be integrated into a system quickly and smoothly."


Important aspects of a component:

    * Independent deployment: e.g., executable, shared library, .class file, jar file, perl module, plus many other mechanisms
          o Having this does not necessarily mean you are doing CBSE!
    * Interaction standard: well-defined mechanisms for component interaction.
    * Composition standard:
    * Interfaces
    * "Properties that make it reusable and replaceable": S+P go on to say "it has high cohesion, low coupling, a well-defined interface, and is an encapsulated abstraction of a well-understood thing." ]]></property>