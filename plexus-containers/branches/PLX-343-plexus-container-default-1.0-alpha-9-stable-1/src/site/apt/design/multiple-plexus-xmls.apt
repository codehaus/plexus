  ---
  Design Supporting Multiple plexus.xml Files
  ---
  John Casey
  ---
  11-April-2005
  ---
  
Design Documentation: Supporting Multiple plexus.xml Files

* Introduction and Motivation

  Currently, plexus is configured using one plexus.xml file, one user-space
  plexus.xml file, and zero or more components.xml files. The components.xml
  files are assumed to be embedded in META-INF/plexus within component artifacts
  that are included in the classpath. Unfortunately, because of the differences
  between plexus.xml and components.xml, so-called "core" components cannot be
  added or configured using components.xml (because the container is assumed to
  be completely ready to run before the component descriptors are processed).
  
  This means that the plexus.xml file has to be created outside of any component
  which in turn means that the plexus.xml author has to have quite a lot of 
  information about each "core" component in order to write a core descriptor.
  
  Support for fragmentary plexus.xml files in component artifacts would promote
  reusability, and reduce the requirements for extensive dependency 
  specification inside a container-driven application, particularly when that
  application has many optional add-ons that require optional core components
  to be added to the container.
  
  One good use-case for multiple plexus.xml files is maven-2. We want to support
  multiple languages for maven plugins, but cannot without adding their 
  respective plexus-component-factory implementations. While this may not seem
  to be that big of a deal, the dependency chains dragged into the build by the
  inclusion of any one non-java plexus-component-factory can be quite 
  significant. Bringing in plexus-marmalade-factory, for instance, dragged in 
  4 new artifacts (plexus-marmalade-factory, marmalade-core, 
  maven-script-marmalade, marmalade-el-commons) to the maven-core build, where
  we had to configure the plexus marmalade factory in the plexus.xml...we didn't
  have the luxury of using different plexus.xml files depending on the desired
  language support.
  
  Adding a restricted incarnation of multiple plexus.xml support would allow
  users to determine which languages they want to use, and configure the 
  appropriate factories by calling a maven-plugin, or by simply dropping the 
  appropriate artifacts into the core directory.
  
  <<NOTE:>> It might be perfectly safe to allow resolved component-artifacts
  to participate in core component configuration, as well. We need to explore
  these issues more fully in a design session, and come to some sort of 
  consensus. The biggest advantage would be allowing maven plugins to simply 
  load the component factory they needed to run, on-the-fly.
  
  For now, I will pursue discovery via plexus.xml even on resolved component
  artifacts.
  
* Modification Points

  The following points in the code will have to be modified in order to 
  accommodate this change:
  
  * [PlexusXmlComponentDiscoverer<(new)>] Scan for any resources named
      META-INF/plexus/plexus.xml. This discoverer will be used to component
      sets from the former core-config file, and will read multiple instances
      of this file in the classpath.
      
      This component will also have other public methods which are not part of
      the ComponentDiscoverer interface, and which will allow extraction of a
      PlexusConfiguration object that contains the member-component information
      for the container's configuration. In this way, we can reuse the code 
      from this ComponentDiscoverer implementation which reads from plexus.xml 
      files. It seems important to centralize all handler logic for this 
      resource, in order to promote maintainability and reduce the lengths to 
      which we must go if we change something in this file.
      
  * [DefaultPlexusContainer] Change the processing logic for plexus.xml 
      resources to use the new PlexusXmlComponentDiscoverer, described above.
      In this usage, the implementation-specific public methods will be used
      to directly retrieve the PlexusConfiguration from those resources. This is
      part of the non-interface API for this component, as stated above. Once
      the PlexusConfiguration is retrieved from the PlexusXmlComponentDiscoverer
      instance, it will be merged in much the same way as is currently done,
      with the exception that each instance of the plexus.xml resource will be
      merged.

      
* Implications for Container Initialization and Resolved Artifacts

  One implication of this type of discovery is that any resolved artifacts -
  that is, any artifact which is not on the original classpath of the
  container - will not be able to contribute to the member-components for the 
  container itself. This should be obvious, because no component-artifact
  resolution can take place until the container itself is initialized.
  
  <<NOTE:>> Is that really true? What about component descriptors in the original
  classpath that declare dependencies on artifacts that don't exist in the
  original classpath? Is there any reasonable way to initialize the artifact
  container with a set of artifact repositories, such that missing artifacts
  can be resolved, downloaded, and added to the classpath at initialization-time?
  Is this even a Good Thing(tm)?? 
  
  If we were to support artifact resolution at initialization-time, we could
  say that only the artifacts either:
  
  [[a]] present on the original classpath, or
  
  [[b]] implied by artifacts on the original classpath
  
  would be used to discover container member-components (things like
  ComponentRepository, ComponentFactoryManager, etc.) and that subsequent calls
  to addComponent(..) or addArtifact(..) or whatever it's called would not be 
  allowed to reconfigure the container's member-components.
  
  I think we could handle this, by changing the
  way we construct/initialize the ArtifactEnabledContainer, but it remains to be
  decided whether this non-conventional initialization parameter is permissable,
  and whether this approach is a good idea. It might be better to require that
  the core component set (that is, the components with which the container is
  initialized) be completely present on the original classpath, to avoid network
  induced errors during the initialization process...
  
  My personal tendency is to say that resolution of missing artifacts at
  initialization time is the only consistent way of using an 
  ArtifactEnabledContainer.
  
