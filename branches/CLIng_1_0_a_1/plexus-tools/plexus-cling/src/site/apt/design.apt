---
CLIng Overview
---
John Casey
---
09/13/2004
---

An Overview of CLIng

*Abstract

  CLIng is a next-generation command-line interface which utilizes maven's 
  artifact API to centralize and automate the management of an application's
  dependencies. Command-line applications are currently too complex to 
  implement, especially with regard to configuration and argument parsing. CLIng
  aims to remedy this.
  
*Introduction

  Present-day incarnations of command-line interfaces all share one common 
  drawback: they must be coded. That is, each application which wants to provide
  an entry point from the command line must provide some sort of Main class 
  which parses argument strings and sets up the environment before delegating
  the <<real>> execution to the application implementation. On the one hand, this
  is a good practice compared to simply providing a main() method in the 
  implementation class, since is separates CLI concerns from the runtime context
  of the application. On the other hand, all Main classes look remarkably 
  similar, which leads to an important question: Are contemporary command-line
  frameworks too low-level?
  
*Too Low-Level?

  Retyping of identical or even similar code often leads a good programmer to 
  question whether that functionality would best be provided by a piece of
  common infrastructure. Each and every command-line entry point class provides
  the following:
  
   - option parsing/handling
   - environment setup
   - delegation to a generic application entry point class
  
  Add to this the fact that the JVM itself must be setup by some external entity
  (programmer or shell script), and you get a fairly complete picture of what it
  takes to launch an application from the command line.
  
  Currently, several frameworks do exist to aid in the creation of a CLI entry
  point for applications. <<However>>, these frameworks focus almost exclusively
  on only one of the aforementioned aspects of command-line launching:
  
   - ClassWorlds: classpath handling, some limited environment setup
   - getopt: options/argument parsing
   - commons-cli: options/argument parsing
  
  The point is that it <<should be>> possible to centralize all of this into one
  application descriptor, and add to it the ability to specify runtime library
  dependencies, which will be downloaded at first launch. The big advantage is 
  that this type of application would be very lightweight to download and 
  install, and that it would centralize all of the application's dependencies
  with other dependency libraries on the system, thereby allowing multiple
  applications to use the same .jar file. Using this system, the application
  developer would deploy his application .jar file to some public repository, 
  then create an application descriptor. End-users would download the 
  application descriptor, and possibly a shell script which might specify some
  application defaults and/or provide some advanced option handling. Obviously, 
  system-specific configurations, etc. would also have to be either installed
  or created, since downloading them as dependencies doesn't really make sense.

*CLIng Design Notes

  Here are some general design notes for CLIng, which will guide the process of
  designing and implementing the app launcher itself.
  
   - Application descriptor contains:
       
       - Options: short-name, long-name, required, type, class-property, 
         description
       
       - Local classpath entries: directories, non-dependencies locally added
         to the classpath
         
       - Library dependencies: artifact specifications for downloading runtime
         dependencies
         
       - Environment variables: System properties to be set, with expansion of
         existing sysprops at parse-time
         
       - Main class configuration: class-name and method to execute for the 
         application entry point. Options' class-property specs will be used to
         set properties on this main-class using JavaBeans standard 
         introspection
   
   - CLIng uses ClassWorlds to bootstrap itself, and maybe expose some basic 
     envars.
   
   - Application descriptor should allow addition of classpath entries <<from the
     local directory structure only>>.
     
   