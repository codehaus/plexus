<?xml version = "1.0" encoding = "UTF-8"?>
<!--Generated by XML Authority. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
<xsd:schema xmlns:xsd = "http://www.w3.org/2001/XMLSchema"><!-- 
	 DTD for FormProc form configurations.

	 Author: Anthony Eden (me@anthonyeden.com)
-->
	<!--
	 Root element for the form configuration.
-->
	<xsd:element name = "form">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "name" minOccurs = "0"/>
				<xsd:element ref = "validator" minOccurs = "0"/>
				<xsd:element ref = "converter" minOccurs = "0"/>
				<xsd:element ref = "storer" minOccurs = "0"/>
				<xsd:element ref = "element" minOccurs = "0" maxOccurs = "unbounded"/>
				<xsd:element ref = "element-group" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "name" type = "xsd:string"><!-- 
	The form's name which is used as a reference in applications.  The
	form name should be unique for all forms in the application.
-->
	</xsd:element>
	<xsd:element name = "element-group"><!-- 
	 A group of 0 or more elements with an optional validator.  All
	 elements in the group are available to the validator at runtime.
	 
	 The element-group's name attribute is required and must be unique
	 on the form.
-->
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "element" minOccurs = "0" maxOccurs = "unbounded"/>
				<xsd:element ref = "validator" minOccurs = "0"/>
			</xsd:sequence>
			<xsd:attribute name = "name" use = "required" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "element"><!--
	 A form element definition.
	 
	 The element's name attribute is required and must be unique on the
	 form.
	 
	 The optional attribute is used to make the FormElement optional. 
	 The default value is 'false'.  Set to "true" to make the element
	 optional.
-->
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref = "validator" minOccurs = "0"/>
				<xsd:element ref = "converter" minOccurs = "0"/>
				<xsd:element ref = "storer" minOccurs = "0"/>
				<xsd:element ref = "write-method" minOccurs = "0"/>
				<xsd:element ref = "default" minOccurs = "0"/>
				<xsd:element ref = "message" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
			<xsd:attribute name = "name" use = "required" type = "xsd:string"/>
			<xsd:attribute name = "optional" use = "optional" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "validator"><!--
	 A validator definition.  Validators must extend from the 
	 org.formproc.validation.Validator abstract base class. The validator's 
	 children can include error elements as well as any other configuration 
	 information which is passed to the validator when it is constructed.
	 
	 The type attribute is required and should match a validator type
	 defined in the formproc.xml configuration file in the validator-map
	 section.
-->
		<xsd:complexType mixed = "true">
			<xsd:choice minOccurs = "0" maxOccurs = "unbounded">
				<xsd:element ref = "error"/>
			</xsd:choice>
			<xsd:attribute name = "type" use = "required" type = "xsd:string"/>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "converter"><!--
	 A converter definition.  Converters must implement the
	 org.formproc.conversion.TypeConverter interface.  The converter's
	 children can include any configuration information which is passed
	 to the converter when it is constructed.
	 
	 The classname attribute is required and must be the fully-qualified
	 Java class name of the converter implementation.
-->
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute name = "classname" use = "required" type = "xsd:string"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "storer"><!-- 
	 A storer definition.  Storer must implement the org.formproc.store.Storer 
	 interface.  The storer's children can include any configuration information 
	 which is passed to the storer when it is constructed.
	 
	 The classname attribute is required and must be the fully-qualified
	 Java class name of the storer implementation.
-->
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute name = "classname" use = "required" type = "xsd:string"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "write-method" type = "xsd:string"><!--
	 The write method used by the ReflectionStorer implementation.
-->
	</xsd:element>
	<xsd:element name = "default" type = "xsd:string"><!--
	 The default value which is used when the submitted value for the specified
	 form element is null or an empty String.
-->
	</xsd:element>
	<xsd:element name = "message"><!--
	 Defines a message or means for providing messages to the user.
	 
	 Possible uses:
	 
	 1.) An inline message, with an optional lang attribute, which can be
	     displayed to the user.
	 2.) If the resource attribute is specified then the given resource bundle
	     class is used.  The element value should be the resource key for the
	     message in the bundle.
	 3.) If the classname attribute is specified then the given MessageProvider
	     class is used.
-->
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute name = "resource" use = "optional" type = "xsd:string"/>
					<xsd:attribute name = "lang" use = "optional" type = "xsd:string"/>
					<xsd:attribute name = "classname" use = "optional" type = "xsd:string"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name = "error"><!--
	 Defines an error message or means for providing error messages to the 
	 user in case the validator fails.
	 
	 Possible uses:
	 
	 1.) An inline message, with an optional lang attribute, which can be
	     displayed to the user.
	 2.) If the resource attribute is specified then the given resource bundle
	     class is used.  The element value should be the resource key for the
	     message in the bundle.
	 3.) If the classname attribute is specified then the given MessageProvider
	     class is used.
-->
		<xsd:complexType>
			<xsd:simpleContent>
				<xsd:extension base = "xsd:string">
					<xsd:attribute name = "resource" use = "optional" type = "xsd:string"/>
					<xsd:attribute name = "lang" use = "optional" type = "xsd:string"/>
					<xsd:attribute name = "classname" use = "optional" type = "xsd:string"/>
				</xsd:extension>
			</xsd:simpleContent>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>