<bob> but yah, I'm free Monday if you need contract werkflow help
<jason> hokay
<jason> if we run into anything i'll definitely take you up on that
<jason> i think we would like to give it a try
<jason> so my first question is exception handling
<jason> would we just need a try/catch around beginTx and handle it there?
<jason> would that be the place to have the single handler?
<jason> you have a scary memory so i assume you know what i'm talking about :-)
<bob> Engine::run(InstanceTask)
<bob> transaction.run( task.getPath() ) is where the real work is done
<bob> inside there is where you can jack in a new werkflow.spi.ErrorHandler perhaps
<bob> in impls of RobustTransaction
<bob> though, run() itself throws any exceptions
<bob> so, catch'em back in Engine.java
<bob> rollback instead of commit
<trygvis> is there one transaction per action?
<bob> should be
<bob> pull a task off the queue, start a tx, run it, commit/rollback
<trygvis> so if a task throws a exception it'll just stop the entire activity?
<jason> activity == flow
<bob> yah, it's all in Engine.java
<bob> run(Task) -> run(Tx, instanceId, path)
<bob> if it throws an exception, it'll stop, yah
<bob> since it hasn't satisfied anything to continue on
<bob> you can force another re-eval later to try again
<trygvis> yeah, that's also interesting to do
<bob> might be smart to resched if an exception is caught, to automatically try again
<bob> in case it's a transient failure perhaps
<trygvis> or require manual work
<bob> or, should be able to let it fall back and try a different option/route
<trygvis> this will happen when a external resource is failing (cvs server down)
<bob> ie, catch an exception, set a flag that opens up a differenet path out
<trygvis> so we need pluggable strategies ;)
<bob> I think it's finite
<bob> TransientFailureException to resched
<bob> otherwise, some ErrorHandler to do random other work
<trygvis> so if you want it to retry X times and then require manual work you'd do that in the action?
<bob> hm
<jason> is there a test that describes standard usage?
<bob> probably make the transition have some state where it's only evaled if attempt<10 or such
<jason> i'm looking at the tests and see beginTx
<jason> but not run()
<bob> for retries, etc, it's all based upon Satisfactions
<bob> a transition can be unsatified if retries>5 or such, and that one becomes ignorable
<bob> yah, the beginTx in the tests is probably just mocking up larger application transactions
<bob> since the tests are pretty much purely automated, you won't see an explicit run()
<bob> you start a flow, werkflow sees that something is in state #1
<bob> it schedules the flow to be eval'd
<bob> the engine spins a thread (the scheduler)
<bob> which plucks things off, evals them, and transitions as required
<bob> the engine is a de-queueing loop
<bob> so, the tests will just show a flow being started, and it does the rest on its own
<bob> without explicit calls to run()
<bob> which test you looking at?
<jason> BlogWerkflowTest
<jason> is that how we should call it if we're executing a set of actions?
<bob> so, check testStartNewWorkflow()
<jason> hokay
<bob> it does tx management to get the initial state setup
<jason> gandering
<bob> the instance stalls, waiting on external data
<bob> then calls tx.satisfy(..)
<bob> which sends the instance to the queue to be checked
<bob> that uses interactive idioms
<bob> but mocks a human interacting
<bob> you never call run(), you just feed data, and werkflow figures out when it can advance further along the flow
<bob> so, you might have a BuildCompletedSatisfaction
<bob> when you join() the Process that ran the build, you fire off that, and then werkflow carries on
<jason> so you would never call run(), should it be in the public interface?
<bob> no, probably not
<bob> though, might be public for subclassing crapp
<bob> ie, Engine.java is subclassed to JdoEngine
<bob> though, protected might be better
<bob> remember when I wrote this, and what I was doing/smoking :)
<jason> hokay, i'll just make a note of that :-)
<trygvis> I'd say Engine should be a interface
<jason> let me paste something
<bob> trygvis: sure, but we'd need an AbstractEngine for JdoEngine to extend
<bob> which would be fine
<trygvis> exactly
<bob> I go through anti-interface phases sometimes
<trygvis> :'(
<jason> so something simple here:
<bob> other times, I have interface overload phases
<jason> <workflow xmlns="http://werkflow.codehaus.org/simple" id="continuum">
<jason>   <sequence>
<jason>     <action id="update-scm"/>
<jason>     <action id="update-metadata"/>
<jason>     <action id="build"/>
<jason>   </sequence>
<jason> </workflow>
<jason>  
<bob> yah, that'd just happen sequentially
<jason> would we just do a beginTx for that?
<bob> just newWorkflow() or whatnot, and wait a few moments
<bob> each <action> would fall into Engine::run(..)
<bob> each would get its own Tx
<bob> I /think/, but am not sure, you would have to beginTx around newworkflow
<jason> ok, so how would start that specifically? newWorkflow is in werkflow?
<jason> we just switch plexus to svn so i don't have it setup with viewcvs
<bob> sorry, newInstance() in Engine
<bob> wait, that's not public
<bob> one sec
<jason> it's package 
<bob> right, okay, here we go...
<bob>         Transaction transaction = this.engine.beginTransaction(this.workflow.getId(), "een", context);
<bob>         RobustInstance instance = this.engine.getInstanceManager().getInstance(transaction.getInstanceId());
<bob>         transaction.commit();
<bob> beginTransaction() gets it almost started
<bob> but werkflow doesn't truly get ahold of it until you commit()
<bob> so, you could get away with
<bob> engine.beginTx(...).commit()
<bob> and werkflow will pick it up, and walk through the steps
<bob> you'd end up with 4 tx
<bob> 1 to begin the workflow and get it into the system
<bob> and 1 for each <action>
<bob> the 3 <action> tx's run through run(..) in Engine
<bob> where they might through, you can catch, and deal with
<bob> so, starting a flow is transactional, just to ensure it's positively in the db
<bob> and then each action that occurs within a flow is transactional
<bob> so, if update-scm fails, you'd still be in the very first 'start' state
<bob> and have to take remedial action
<trygvis> makes sense
<trygvis> do you also go through package protected phases?
<jason> so, catch in the engine and rollback?
<bob> trygvis: yah :)
<bob> jason: yah
<jason> we're just trying to figure out how to get the information back to the user
<jason> ok, cool
<bob> everything you need to do is in Engine
<bob> can catch, handle, report to user
<bob> run(..) is where the meat of the work occurs
<jason> so an interface for an error handler
<bob> everything else is transaction handling muck
<bob> yah, just add werkflow.spi.ErrorHandler interface
<bob> Engine.setErrorHandler(...)
<jason> hokay, will do that
<jason> and it should be integrated into run(Task) ?
<bob> next run(...) with 3 args
<bob> page down
<bob> run(Task) bounces through the persistence layer to setup the right type of tx
<bob> jdo tx, hibernate tx
<bob> then passes back to Engine.run(...,...,...)
<jason> so i shouldn't hook it around run(Path) ?
<bob> Inside of     void run(RobustTransaction transaction,
<bob>              String instanceId,
<bob>              Path path)
<bob> don't let the error escape that, I think
<bob> wait, I'm dumb
<bob> you're right
<bob> run(InstanceTask)
<bob> catch/handle in there
<jason> hokay :-)
<bob> there's already a catch() which does the default of a rollback
<bob> just add in ErrorHandler.handle(...) to do more
<bob> so, right now, if it throws, it causes a rollback
<jason> ok, so the rollback is always prudent and the error handler would be defined more for reporting?
<bob> you just want to be able to do more
<jason> ok, so where the printStackTrace is i'll add the handler :-)
<bob> yah, if you commit(), then it'll think the action succeeded and try to do the next one
<bob> you want werkflow to know it failed on this task
<bob> what you do after that is up to you
<bob> might be a case where you open a new tx, set some values (ie, retry time, favourite cheese) and commit, and re-eval the flow to see where it can go next
<jason> ok, that sounds good. so the process is rolled back and we can alert however we like given an error handler
<bob> ie, a state might have a transition to "report success" and "report failure"
<bob> if the action fails, you rollback, set the error message on the instance, and re-eval
<bob> report failure opens up once it sees an error message
<bob> perhaps
<bob> probably a better way to model that though
<trygvis> I'm making dinner but just keep chatting, I'm reading the logs
<bob> 'k
<bob> for situs where an error (build failure) might be normal, I'd probably have an aciton that does the build
<bob> an action that checks the result, and sets a variable (errorMessage or such)
<bob> and then transition purely based on errorMessage
<trygvis> build failure != build error (at least not in continuum)
<bob> while the build had errors, the actions themselves succeeded
<bob> ie, maven ran fine, but tests failed
<bob> not to confuse where $MAVEN_HOME isn't set, and maven didn't even run
<bob> which would be an exception from werkflow's POV
<jason> yah, that's an error
<trygvis> yeah, same in continuum
<bob> cool
<bob> so, failures would be business-as-usual, and not go through werkflow ErrorHandler
<trygvis> yep
<bob> only true resource failures would do that
<trygvis> exactly
<bob> sounds good
<jason> it's amazing how you don't forget
<bob> I've got a freaky long-term memolry
<bob> my short-term is shot to hell, but wait a few days, and I can answer questions :)
<jason> hehe
<bob> moving back inside.  too chilly on the porch
<jason> bob: how do i setup viewcvs for subversion?
--- bob is now known as bob_away
--- bob_away is now known as bob
<jason> do i need to manage the Txs at all?
<jason> to do satisfactions i need the tx?
<jason> just wondering if i can get hold of a tx later
<jason> or just wondering how I do tx.satisfy() if i don't hold on to them
<jason> sorry if these are dumb questions
<bob> just ask for a new one, call satisfy() and commit
<bob> fine-grained tx's
<jason> ah cool
<bob> and I think perhaps we can push some tx management into the Engine api
<bob> just engine.satisfy() perhaps could open a tx, satisfy, commit
<bob> can i get jgraph 5.5.1 on ibiblio, please?
<bob> http://sourceforge.net/project/showfiles.php?group_id=43118&package_id=35387
<jason> sure, whatcha making?
<bob> visualizer for flox flows
<bob> could do similar for werkflow
<bob> just static image for web page
<bob> maybe clickable to pull up stats about what's in each state
<jason> that would be awesome
<bob> yep, I'm free starting Monday :)
<jason> :-)
<jason> jgraph is not very good at rendering images
<jason> jung.sf.net might be better
<jason> actually jung is for networks really
<bob> flows are networks, though, so that might work
<bob> but I do need boxes for the vertexes
<bob> so I can label them with the state/action name
<bob> though, I also need directed graph stuff
<jason> i jung would be far better, it looks nice
<jason> they have a pluggable renderer demo
<jason> which shows off what it can do
<jason> looks pretty flexible from that demo
<jason> i was going to try it for POM visualization
<bob> 'k, I'll research
<jason> so
<jason> would some thing like:
<jason>     void startWorkflow( String workflowId, String instanceId, InitialContext context )
<jason>         throws NoSuchWorkflowException, DuplicateInstanceException,InterruptedException,Exception;
<jason>  
<jason> be ok as a wrapper which calls
<jason> beginTransaction
<jason> if i don't need the tx?
<jason> sorry, let me explain that more clearly
<jason> that would begin a tx, get a robust instance and tx.commit
<bob> jung looks nice
<jason> yah
<jason> just making sure i don't need to hold on to the tx after the first commit
<bob> yep, you could wrap it all up in startWf
<bob> no need to hang onto tx
<bob> dead after it's commit()'d
<jason> ah, things i will learn
<jason> i've become dumb in the last few months
<jason> would holding on to the instance be wise?
<jason> or i can always look that up
<trygvis> InstanceManager.getInstance(id)
<jason> yup :-)
<trygvis> so a instance is a instance of a flow?
<jason> yes, an instance of a proecess
<jason> process
<jason> or flow
<jason> i think wrt workflow a case is an instance of a process
<jason> bob can correct me if i'm wrong
<trygvis> hm, so whatever that gets into the instance manager has to be PersitenceCapable
<jason> really it is only a set of pointers
<jason> i wouldn't ever store data in there
<jason> i would point to it so we could get it out of our store
<trygvis> so String objects only
<jason> basically only storing attributes for the case
<jason> and if you need anything real, you store ids and look them up
<trygvis> ypu
<jason> i checked in some more to plexus-werkflow
<trygvis> ypu
<trygvis> yup!
<jason> you want to see how we might hookup the persistence with jdo?
<trygvis> that's already there, no?
<bob> Instance is an instantiation of a flow
<bob> don't hang onto it
<bob> look it up
<bob> that way you have fresh data from the db
<trygvis> could you hook up commit mails? I'd hate to miss commits
<bob> yah, will do in a bit
<jason> we weren't trying to make you do it :-)
<jason> just tell me how if you like
<bob> I like cvsspam these days
<bob> dunno how to do it with svn, but here's doc on cvs
<bob> http://despots.codehaus.org/Using+CVSSpam
<jason> right o, thanks
<trygvis> I hate that html shit, doesn't look good in mutt
<bob> suck it up, bucko
<jason> bob: jgraph will be up there shortly
<jason> we don't put things directly on ibiblio anymore
<jason> it syncs from beaver
<bob> cool
<bob> jung already up there?
<jason> it is but not sure what version
<bob> latest whatever
<bob> sorry, hard time reading accurately today
<bob> no jung
<bob> at all
<jason> one sec
<bob> 1.6.0 seems to be the latest though
<jason> put 1.6 up there
<jason> it will sync shortly
<bob> cool thanks
<trygvis> should the version of werkflow become alpha-2-SNAPSHOT?
<jason> yah, i'll do that now
