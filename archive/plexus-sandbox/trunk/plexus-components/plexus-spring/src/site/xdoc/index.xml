<?xml version="1.0"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<document>

  <properties>
    <title>Plexus to Spring Adapter</title>
  </properties>

  <body>

    <section name="Plexus to Spring Adapter">
      <subsection name="overview">
        <p>
        This library is an adapter to use plexus components in a springframework application context.
        It translates plexus components descriptors and interfaces to spring to get dependency
        injection and interface based lifecycle management, with some limitations.
      </p>
	 </subsection>
	 <subsection name="features">
      <p>
        Pexus-spring provides to plexus components :
        <ul>
          <li>Lifecycle management (creation, initialization, Logger injection and destruction</li>
          <li>Limited Contextualization using a PlexusContainerAdapter and ContextAdapter</li>
          <li>Injection of dependencies (using plexus direct field-injection) based on plexus descriptor</li>
          <li>Injection of configuration, limited to String and simple types</li>
        </ul>
      </p>
     </subsection>
	 <subsection name="how ?">
      <p>
        Plexus-spring defines some custom Spring components :
        <ul>
          <li>a <tt>PlexusBeanDefinitionDocumentReader</tt> to translate the plexus component descriptors
            to spring context XML document (using XSLT)</li>
          <li>a spring namespace dedicated to plexus, that mimics the plexus component descriptor format</li>
          <li>a FactoryBean to create and inject dependencies in plexus components</li>
          <li>a BeanPostProcessor to support plexus lifecycle interfaces in spring context
            (LogEnabled, Contextualizable, Initializable, Disposable).</li>
          <li>a <tt>PlexusContainerAdapter</tt> to support plexus-like lookups in spring context</li>
        </ul>
        To make life simplier, plexus-spring also provides a <tt>PlexusClassPathXmlApplicationContext</tt>
        that registers all necessary components and accepts either spring or plexus XML files as context locations.
      </p>
    </subsection>
    <subsection name="who is using it ?">
      <p>This adapter library has been created as part of the migration effort from plexus to spring
        in apache Archiva. It allows a smooth migration from plexus to spring as the initial components
        can be used as is in spring until they are migrated to be more spring compliant or replaced.
      </p>
      <p>It can also be used to support some plexus components packaged as jars that provide helpfull
        features to a spring-based application.
      </p>
    </subsection>
    <subsection name="interpolation">
      <p>Some components use interpolation in the configuration element with some predefined values (plexus.home).</p>
      <p>To handle this you have to record a propertyConfigurer Spring bean :
        <source>
<![CDATA[
  <bean id="propertyConfigurer" 
         class="org.codehaus.plexus.spring.PlexusServletContextPropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:plexus.properties</value>
      </list>
    </property> 
    <!-- ignore if plexus.properties not found -->
    <property name="ignoreResourceNotFound">
      <value>true</value>
    </property>  
    <!-- ignore if a interpolated key not exists -->
    <property name="ignoreUnresolvablePlaceholders">
      <value>true</value>
    </property> 
  </bean>
]]>
        </source>
      </p>
      <p>The PlexusServletContextPropertyPlaceholderConfigurer will set a plexus.home value 
        (if not already found in the properties defined in location to File( servletContext.getRealPath( "/WEB-INF" ) ).getAbsolutePath()</p>
    </subsection>
  </section>
</body>

</document>
